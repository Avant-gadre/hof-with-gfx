#	Various useful scripted effects
#
#	By Rylock and Alpinia
# removes the country in scope from all wars (separately - it won't end the wars)
separate_peace_all_wars = {
	if = {
		limit = {
			has_war = yes
		}
		effect_tooltip = {
			every_enemy_country = {
				limit = {
					NOT = {
						civilwar_target = PREV
					}
				}
				white_peace = PREV
			}
		}
		hidden_effect = {
			# first peace out with faction leaders
			every_enemy_country = {
				limit = {
					is_faction_leader = yes
					NOT = {
						civilwar_target = PREV
					}
				}
				white_peace = PREV
			}
			# then all non-puppets whose faction leaders aren't in the war
			every_enemy_country = {
				limit = {
					is_subject = no
					is_in_faction = yes
					faction_leader = {
						NOT = {
							has_war_with = PREV.PREV
						}
					}
					NOT = {
						civilwar_target = PREV
					}
				}
				white_peace = PREV
			}
			# then all non-puppets who aren't in factions
			every_enemy_country = {
				limit = {
					is_subject = no
					is_in_faction = no
					NOT = {
						civilwar_target = PREV
					}
				}
				white_peace = PREV
			}
			# then all puppets whose overlords aren't in the war
			every_enemy_country = {
				limit = {
					is_subject = yes
					overlord = {
						NOT = {
							has_war_with = PREV.PREV
						}
					}
					NOT = {
						civilwar_target = PREV
					}
				}
				white_peace = PREV
			}
		}
	}
}

# ends puppet status, removes from faction and all current wars (used for rebellions)
clear_all_relations = {
	if = {
		limit = {
			is_subject = yes
		}
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
	else_if = {
		limit = {
			num_subjects > 0
		}
		every_subject_country = {
			overlord = {
				set_autonomy = {
					target = PREV
					autonomy_state = autonomy_free
				}
			}
		}
	}
	if = {
		limit = {
			is_faction_leader = yes
		}
		dismantle_faction = yes
	}
	else_if = {
		limit = {
			is_in_faction = yes
		}
		leave_faction = yes
	}
	separate_peace_all_wars = yes
	every_other_country = {
		diplomatic_relation = {
			country = PREV
			relation = guarantee
			active = no
		}
		diplomatic_relation = {
			country = PREV
			relation = non_aggression_pact
			active = no
		}
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
		diplomatic_relation = {
			country = PREV
			relation = market_access_rights
			active = no
		}
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = guarantee
				active = no
			}
			diplomatic_relation = {
				country = PREV
				relation = military_access
				active = no
			}
		}
	}
}

# ends puppet status, removes from faction and clears all relations except wars (used for rebellions)
clear_all_relations_except_wars = {
	if = {
		limit = {
			is_subject = yes
		}
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
	if = {
		limit = {
			is_in_faction = yes
		}
		leave_faction = yes
	}
	every_other_country = {
		limit = {
			has_guaranteed = PREV
		}
		diplomatic_relation = {
			country = PREV
			relation = guarantee
			active = no
		}
	}
	every_other_country = {
		limit = {
			has_non_aggression_pact_with = PREV
		}
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
	every_other_country = {
		limit = {
			has_military_access_to = PREV
		}
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = military_access
				active = no
			}
		}
	}
	every_other_country = {
		limit = {
			gives_military_access_to = PREV
		}
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
}

# clears all relations with PREV (won't remove from faction if not a faction leader, nor stop wars if not a valid target)
clear_relations_with_PREV = {
	if = {
		limit = {
			has_subject = PREV
		}
		set_autonomy = {
			target = PREV
			autonomy_state = autonomy_free
		}
	}
	else_if = {
		limit = {
			is_subject_of = PREV
		}
		PREV = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
	if = {
		limit = {
			is_in_faction_with = PREV
			OR = {
				is_faction_leader = yes
				PREV = {
					is_faction_leader = yes
				}
			}
		}
		leave_faction = yes
	}
	if = {
		limit = {
			has_war_with = PREV
			is_valid_peace_target = yes
			PREV = {
				is_valid_peace_target = yes
			}
		}
		PREV = {
			save_event_target_as = white_peace_receiver
		}
		white_peace_with_TARGET = yes
	}
	if = {
		limit = {
			has_guaranteed = PREV
		}
		diplomatic_relation = {
			country = PREV
			relation = guarantee
			active = no
		}
	}
	else_if = {
		limit = {
			is_guaranteed_by = PREV
		}
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = guarantee
				active = no
			}
		}
	}
	if = {
		limit = {
			has_non_aggression_pact_with = PREV
		}
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
	if = {
		limit = {
			has_military_access_to = PREV
		}
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = military_access
				active = no
			}
		}
	}
	if = {
		limit = {
			gives_military_access_to = PREV
		}
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
}

# changes the government of the country in scope to that of PREV
copy_popularities_of_PREV = {
	set_politics = {
		ruling_party = var:PREV.current_party_ideology_group
	}
	hidden_effect = {
		set_popularities = {
			democratic = PREV.party_popularity_100@democratic
			neutrality = PREV.party_popularity_100@neutrality
			fascism = PREV.party_popularity_100@fascism
			communism = PREV.party_popularity_100@communism
		}
	}
}

# changes the popularites of the country in scope to that of ROOT (the country running the event)
copy_popularities_of_ROOT = {
	hidden_effect = {
		set_popularities = {
			democratic = ROOT.party_popularity_100@democratic
			neutrality = ROOT.party_popularity_100@neutrality
			fascism = ROOT.party_popularity_100@fascism
			communism = ROOT.party_popularity_100@communism
		}
	}
}

# changes the laws of the country in scope to that of PREV (the country running the event)
copy_laws_of_PREV = {
	hidden_effect = {
		### Economy ###
		if = {
			limit = {
				PREV = {
					has_idea = undisturbed_isolation
				}
			}
			add_ideas = undisturbed_isolation
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = isolation
				}
			}
			add_ideas = isolation
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = civilian_economy
				}
			}
			add_ideas = civilian_economy
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = low_economic_mobilisation
				}
			}
			add_ideas = low_economic_mobilisation
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = partial_economic_mobilisation
				}
			}
			add_ideas = partial_economic_mobilisation
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = war_economy
				}
			}
			add_ideas = war_economy
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = tot_economic_mobilisation
				}
			}
			add_ideas = tot_economic_mobilisation
		}
		### Trade ###
		if = {
			limit = {
				PREV = {
					has_idea = free_trade
				}
			}
			add_ideas = free_trade
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = export_focus
				}
			}
			add_ideas = export_focus
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = limited_exports
				}
			}
			add_ideas = limited_exports
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = closed_economy
				}
			}
			add_ideas = closed_economy
		}
		### Mobilisation ###
		if = {
			limit = {
				PREV = {
					has_idea = disarmed_nation
				}
			}
			add_ideas = disarmed_nation
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = volunteer_only
				}
			}
			add_ideas = volunteer_only
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = limited_conscription
				}
			}
			add_ideas = limited_conscription
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = extensive_conscription
				}
			}
			add_ideas = extensive_conscription
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = service_by_requirement
				}
			}
			add_ideas = service_by_requirement
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = all_adults_serve
				}
			}
			add_ideas = all_adults_serve
		}
		else_if = {
			limit = {
				PREV = {
					has_idea = scraping_the_barrel
				}
			}
			add_ideas = scraping_the_barrel
		}
	}
}

# the following effects are excellent for preserving a puppet's government so it doesn't change to the overlord
# use the first command in the scope of the about-to-be-puppeted country right before the puppet command is executed
# and then the second, also in the scope of the puppet, right after
embargo_ROOT = {
	if = {
		limit = {
			NOT = {
				has_country_flag = embargoed_@ROOT
			}
		}
		set_country_flag = embargoed_@ROOT
		ROOT = {
			set_country_flag = embargoed_@PREV
		}
		if = {
			limit = {
				has_dlc = "By Blood Alone"
			}
			if = {
				limit = {
					NOT = {
						is_embargoing = ROOT
					}
				}
				send_embargo = ROOT
			}
			if = {
				limit = {
					NOT = {
						is_embargoed_by = ROOT
					}
				}
				ROOT = {
					send_embargo = PREV
				}
			}
		}
		else = {
			add_opinion_modifier = {
				modifier = embargo
				target = ROOT
			}
			reverse_add_opinion_modifier = {
				modifier = embargo
				target = ROOT
			}
		}
	}
}

remove_all_AI_templates = {
	hidden_effect = {
		for_loop_effect = {
			start = 1
			end = 20
			compare = less_than_or_equals
			meta_effect = {
				text = {
					if = {
						limit = {
							has_template = "Infantry template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Infantry template [COUNT]"
						}
					}
					if = {
						limit = {
							has_template = "Light Tank template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Light Tank template [COUNT]"
						}
					}
					if = {
						limit = {
							has_template = "Medium Tank template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Medium Tank template [COUNT]"
						}
					}
					if = {
						limit = {
							has_template = "Modern Tank template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Modern Tank template [COUNT]"
						}
					}
					if = {
						limit = {
							has_template = "Marines template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Marines template [COUNT]"
						}
					}
					if = {
						limit = {
							has_template = "Mountaineers template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Mountaineers template [COUNT]"
						}
					}
				}
				COUNT = "[?v]"
			}
		}
	}
}

save_current_factory_count = {
	hidden_effect = {
		if = {
			limit = {
				industrial_complex > 0
			}
			set_variable = {
				previous_industrial_complex_count = building_level@industrial_complex
			}
		}
		if = {
			limit = {
				arms_factory > 0
			}
			set_variable = {
				previous_arms_factory_count = building_level@arms_factory
			}
		}
		if = {
			limit = {
				dockyard > 0
			}
			set_variable = {
				previous_dockyard_count = building_level@dockyard
			}
		}
		if = {
			limit = {
				synthetic_refinery > 0
			}
			set_variable = {
				previous_synthetic_refinery_count = building_level@synthetic_refinery
			}
		}
		if = {
			limit = {
				fuel_silo > 0
			}
			set_variable = {
				previous_fuel_silo_count = building_level@fuel_silo
			}
		}
		if = {
			limit = {
				rocket_site > 0
			}
			set_variable = {
				previous_rocket_site_count = building_level@rocket_site
			}
		}
		if = {
			limit = {
				nuclear_reactor > 0
			}
			set_variable = {
				previous_nuclear_reactor_count = building_level@nuclear_reactor
			}
		}
	}
}

restore_previous_factory_count = {
	hidden_effect = {
		if = {
			limit = {
				has_variable = previous_industrial_complex_count
			}
			subtract_from_variable = {
				previous_industrial_complex_count = building_level@industrial_complex
			}
			if = {
				limit = {
					check_variable = {
						previous_industrial_complex_count > 0
					}
				}
				add_building_construction = {
					type = industrial_complex
					level = previous_industrial_complex_count
					instant_build = yes
				}
			}
			clear_variable = previous_industrial_complex_count
		}
		if = {
			limit = {
				has_variable = previous_arms_factory_count
			}
			subtract_from_variable = {
				previous_arms_factory_count = building_level@arms_factory
			}
			if = {
				limit = {
					check_variable = {
						previous_arms_factory_count > 0
					}
				}
				add_building_construction = {
					type = arms_factory
					level = previous_arms_factory_count
					instant_build = yes
				}
			}
			clear_variable = previous_arms_factory_count
		}
		if = {
			limit = {
				has_variable = previous_dockyard_count
			}
			subtract_from_variable = {
				previous_dockyard_count = building_level@dockyard
			}
			if = {
				limit = {
					check_variable = {
						previous_dockyard_count > 0
					}
				}
				add_building_construction = {
					type = dockyard
					level = previous_dockyard_count
					instant_build = yes
				}
			}
			clear_variable = previous_dockyard_count
		}
		if = {
			limit = {
				has_variable = previous_synthetic_refinery_count
			}
			subtract_from_variable = {
				previous_synthetic_refinery_count = building_level@synthetic_refinery
			}
			if = {
				limit = {
					check_variable = {
						previous_synthetic_refinery_count > 0
					}
				}
				add_building_construction = {
					type = synthetic_refinery
					level = previous_synthetic_refinery_count
					instant_build = yes
				}
			}
			clear_variable = previous_synthetic_refinery_count
		}
		if = {
			limit = {
				has_variable = previous_fuel_silo_count
			}
			subtract_from_variable = {
				previous_fuel_silo_count = building_level@fuel_silo
			}
			if = {
				limit = {
					check_variable = {
						previous_fuel_silo_count > 0
					}
				}
				add_building_construction = {
					type = fuel_silo
					level = previous_fuel_silo_count
					instant_build = yes
				}
			}
			clear_variable = previous_fuel_silo_count
		}
		if = {
			limit = {
				has_variable = previous_rocket_site_count
			}
			subtract_from_variable = {
				previous_rocket_site_count = building_level@rocket_site
			}
			if = {
				limit = {
					check_variable = {
						previous_rocket_site_count > 0
					}
				}
				add_building_construction = {
					type = rocket_site
					level = previous_rocket_site_count
					instant_build = yes
				}
			}
			clear_variable = previous_rocket_site_count
		}
		if = {
			limit = {
				has_variable = previous_nuclear_reactor_count
			}
			subtract_from_variable = {
				previous_nuclear_reactor_count = building_level@nuclear_reactor
			}
			if = {
				limit = {
					check_variable = {
						previous_nuclear_reactor_count > 0
					}
				}
				add_building_construction = {
					type = nuclear_reactor
					level = previous_nuclear_reactor_count
					instant_build = yes
				}
			}
			clear_variable = previous_nuclear_reactor_count
		}
	}
}

#Gives a random agency upgrade or grants a free agency if one has not yet been established
gain_random_agency_upgrade = {
	custom_effect_tooltip = free_agency_upgrade_tt
	hidden_effect = {
		if = {
			limit = {
				has_intelligence_agency = no
			}
			create_intelligence_agency = yes
		}
		else = {
			random_list = {
				1 = {
					upgrade_intelligence_agency = upgrade_economy_civilian
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_economy_civilian
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_army_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_army_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_naval_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_naval_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_airforce_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_airforce_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_passive_defense
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_passive_defense
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_anti_partisan
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_anti_partisan
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_blueprint_stealing
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_blueprint_stealing
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_portable_radios
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_portable_radios
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_invisible_ink
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_invisible_ink
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_plastic_explosives
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_plastic_explosives
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_suicide_pills
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_suicide_pills
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_training_centers
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_training_centers
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_commando_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_commando_training
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_interrogation_techniques
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_interrogation_techniques
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_diplo_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_diplo_training
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_psycho_warfare
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_psycho_warfare
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_form_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_form_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost
							NOT = {
								has_done_agency_upgrade = upgrade_form_department
							}
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost_2
							NOT = {
								has_done_agency_upgrade = upgrade_form_department
							}
							NOT = {
								has_done_agency_upgrade = upgrade_decryption_boost
							}
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength
							NOT = {
								has_done_agency_upgrade = upgrade_form_department
							}
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength_2
							NOT = {
								has_done_agency_upgrade = upgrade_form_department
							}
							NOT = {
								has_done_agency_upgrade = upgrade_crypto_strength
							}
						}
					}
				}
			}
		}
	}
}

#this needs to be called *before* every start_civil_war effect
civil_war_set_flag_to_restore_elections = {
	if = {
		limit = {
			has_elections = yes
		}
		set_country_flag = had_elections
	}
}

# scope is the country being freed
remove_puppet_and_leave_faction = {
	if = {
		limit = {
			is_in_faction = yes
		}
		leave_faction = yes
	}
	if = {
		limit = {
			is_subject = yes
		}
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
}

incoming_war_notification_effect = {
	hidden_effect = {
		country_event = generic_events.30
	}
	#warning event
}

calculate_days_since_game_start = {
	add_to_temp_variable = {
		days_to_event = 706640
	}
	subtract_from_temp_variable = {
		days_to_event = global.num_days
	}
}

##ROOT to join Other's Faction
ask_to_join_faction = {
	country_event = generic_events.10
}

##Invite Other to join ROOT Faction
invite_country_to_faction = {
	country_event = {
		id = generic_events.18
		hours = 4
		random_hours = 4
	}
}

white_peace_with_ROOT = {
	effect_tooltip = {
		if = {
			limit = {
				NOT = {
					civilwar_target = ROOT
				}
			}
			white_peace = ROOT
		}
	}
	hidden_effect = {
		if = {
			limit = {
				has_war_with = ROOT
				NOT = {
					civilwar_target = ROOT
				}
			}
			if = {
				limit = {
					is_in_faction = yes
					is_faction_leader = no
					faction_leader = {
						has_war_with = ROOT
					}
				}
				set_temp_variable = {
					peace_target1 = faction_leader
				}
			}
			else_if = {
				limit = {
					is_subject = yes
					overlord = {
						has_war_with = ROOT
					}
				}
				set_temp_variable = {
					peace_target1 = overlord
				}
			}
			else = {
				set_temp_variable = {
					peace_target1 = THIS
				}
			}
			ROOT = {
				if = {
					limit = {
						is_in_faction = yes
						is_faction_leader = no
						faction_leader = {
							has_war_with = PREV.PREV
						}
					}
					set_temp_variable = {
						peace_target2 = faction_leader
					}
				}
				else_if = {
					limit = {
						is_subject = yes
						overlord = {
							has_war_with = PREV.PREV
						}
					}
					set_temp_variable = {
						peace_target2 = overlord
					}
				}
				else = {
					set_temp_variable = {
						peace_target2 = THIS
					}
				}
			}
			var:peace_target1 = {
				white_peace = var:peace_target2
			}
			#cleanup in case of war merge bugs
			var:peace_target1 = {
				every_enemy_country = {
					limit = {
						is_ally_with = var:peace_target2
					}
					white_peace = var:peace_target1
				}
			}
			var:peace_target2 = {
				every_enemy_country = {
					limit = {
						is_ally_with = var:peace_target1
					}
					white_peace = var:peace_target2
				}
			}
		}
	}
}
