add_namespace = debug
add_namespace = generic_events
##################################
###    State Transfer Events   ###
##################################
# Puppeting
country_event = {
	id = generic_events.250
	title = generic_events.250.t
	desc = generic_events.250.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.250 option generic_events.250.a"
		name = generic_events.250.a		#Regular Puppet
		if = {
			limit = {
				event_target:marked_country = {
					is_in_faction = yes
				}
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = {
						is_in_faction_with = event_target:marked_country
					}
				}
			}
			event_target:marked_country = {
				leave_faction = yes
			}
		}
		event_target:to_be_overlord = {
			puppet = event_target:marked_country
		}
		if = {
			limit = {
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = {
						is_in_faction_with = event_target:marked_country
					}
				}
			}
			event_target:to_be_overlord = {
				faction_leader = {
					add_to_faction = event_target:marked_country
				}
			}
		}
		clear_global_event_target = to_be_overlord
		add_to_variable = {
			ROOT.update_stt_gui = 1
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.250 option generic_events.250.b"
		name = generic_events.250.b		#Keep Old Government
		if = {
			limit = {
				event_target:marked_country = {
					is_in_faction = yes
				}
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = {
						is_in_faction_with = event_target:marked_country
					}
				}
			}
			event_target:marked_country = {
				leave_faction = yes
			}
		}
		event_target:marked_country = {
			get_current_government_type = yes
		}
		custom_effect_tooltip = puppet_but_keep_government_tt
		hidden_effect = {
			event_target:to_be_overlord = {
				puppet = event_target:marked_country
			}
		}
		event_target:marked_country = {
			restore_previous_government_type = yes
		}
		if = {
			limit = {
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = {
						is_in_faction_with = event_target:marked_country
					}
				}
			}
			event_target:to_be_overlord = {
				faction_leader = {
					add_to_faction = event_target:marked_country
				}
			}
		}
		clear_global_event_target = to_be_overlord
		add_to_variable = {
			ROOT.update_stt_gui = 1
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.250 option generic_events.250.c"
		name = generic_events.250.c
		clear_global_event_target = to_be_overlord
	}
}

# Free Puppet
country_event = {
	id = generic_events.251
	title = generic_events.251.t
	desc = generic_events.251.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.251 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			overlord = {
				set_autonomy = {
					target = event_target:marked_country
					autonomy_state = autonomy_free
				}
			}
		}
		add_to_variable = {
			ROOT.update_stt_gui = 1
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.251 option generic_events.250.c"
		name = generic_events.250.c
	}
}

# Add to Faction
country_event = {
	id = generic_events.252
	title = generic_events.252.t
	desc = generic_events.252.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.252 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			if = {
				limit = {
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = {
					is_in_faction = yes
				}
				leave_faction = yes
			}
		}
		event_target:to_be_faction_leader = {
			faction_leader = {
				add_to_faction = event_target:marked_country
			}
		}
		clear_global_event_target = to_be_faction_leader
		add_to_variable = {
			ROOT.update_stt_gui = 1
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.252 option generic_events.250.c"
		name = generic_events.250.c
		clear_global_event_target = to_be_faction_leader
	}
}

# Make Faction Leader
country_event = {
	id = generic_events.253
	title = generic_events.253.t
	desc = generic_events.253.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.253 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			set_faction_leader = yes
		}
		add_to_variable = {
			ROOT.update_stt_gui = 1
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.253 option generic_events.250.c"
		name = generic_events.250.c
	}
}

# Leave Faction
country_event = {
	id = generic_events.254
	title = generic_events.254.t
	desc = generic_events.254.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.254 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			if = {
				limit = {
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = {
					is_in_faction = yes
				}
				leave_faction = yes
			}
		}
		add_to_variable = {
			ROOT.update_stt_gui = 1
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.254 option generic_events.250.c"
		name = generic_events.250.c
	}
}

# Peace
country_event = {
	id = generic_events.255
	title = generic_events.255.t
	desc = generic_events.255.d
	is_triggered_only = yes
	immediate = {
		hidden_effect = {
			event_target:marked_country = {
				save_event_target_as = white_peace_receiver
			}
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.255 option generic_events.250.a"
		name = generic_events.250.a
		event_target:peace_target = {
			white_peace_with_TARGET = yes
		}
		add_to_variable = {
			ROOT.update_stt_gui = 1
		}
		clear_global_event_target = peace_target
	}
	option = {
		log = "[GetLogInfo]: event generic_events.255 option generic_events.255.b"
		name = generic_events.255.b
		trigger = {
			event_target:marked_country = {
				OR = {
					is_subject = yes
					is_in_faction = yes
				}
			}
		}
		event_target:marked_country = {
			if = {
				limit = {
					is_subject = yes
				}
				overlord = {
					set_autonomy = {
						target = event_target:marked_country
						autonomy_state = autonomy_free
					}
				}
			}
			if = {
				limit = {
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = {
					is_in_faction = yes
				}
				leave_faction = yes
			}
		}
		event_target:peace_target = {
			white_peace_with_TARGET = yes
		}
		add_to_variable = {
			ROOT.update_stt_gui = 1
		}
		clear_global_event_target = peace_target
	}
	option = {
		log = "[GetLogInfo]: event generic_events.255 option generic_events.250.c"
		name = generic_events.250.c
		clear_global_event_target = peace_target
	}
}

# Peace Out Everyone
country_event = {
	id = generic_events.256
	title = generic_events.256.t
	desc = generic_events.256.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.256 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			if = {
				limit = {
					is_subject = yes
				}
				overlord = {
					set_autonomy = {
						target = event_target:marked_country
						autonomy_state = autonomy_free
					}
				}
			}
			if = {
				limit = {
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = {
					is_in_faction = yes
				}
				leave_faction = yes
			}
			separate_peace_all_wars = yes
		}
		add_to_variable = {
			ROOT.update_stt_gui = 1
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.256 option generic_events.250.c"
		name = generic_events.250.c
	}
}

# Declare War
country_event = {
	id = generic_events.257
	title = generic_events.257.t
	desc = generic_events.257.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.257 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			declare_war_on = {
				target = event_target:war_target
				type = annex_everything
			}
			hidden_effect = {
				every_country = {
					limit = {
						is_ally_with = event_target:marked_country
						NOT = {
							tag = event_target:marked_country
							has_war_with = event_target:war_target
						}
					}
					meta_effect = {
						text = {
							add_to_war = {
								targeted_alliance = [ALLY]
								enemy = [ENEMY]
							}
						}
						ALLY = "[marked_country.GetTag]"
						ENEMY = "[war_target.GetTag]"
					}
				}
			}
		}
		clear_global_event_target = war_target
		add_to_variable = {
			ROOT.update_stt_gui = 1
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.257 option generic_events.250.c"
		name = generic_events.250.c
		clear_global_event_target = war_target
	}
}
