###########################
# By Kallar, Nijato, Sir Rogers, Zankoas and ~mw~
###########################
add_namespace = generic_events
##收信 receive
country_event = {
	id = generic_events.10
	title = generic_events.10.t
	desc = generic_events.10.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.10 option generic_events.10.a"
		name = generic_events.10.a
		trigger = {
			is_faction_leader = yes
		}
		effect_tooltip = {
			add_to_faction = FROM
		}
		FROM = {
			country_event = generic_events.11
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.10 option generic_events.10.b"
		name = generic_events.10.b
		trigger = {
			is_faction_leader = no
		}
		faction_leader = {
			country_event = generic_events.12
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.10 option generic_events.10.c"
		name = generic_events.10.c
		ai_chance = {
			base = 0
		}
		FROM = {
			country_event = generic_events.17
		}
	}
}

country_event = {
	#FROM accepts
	id = generic_events.11
	title = generic_events.11.t
	desc = generic_events.11.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.11 option generic_events.11.a"
		name = generic_events.11.a
		FROM = {
			add_to_faction = ROOT
		}
	}
}

country_event = {
	#FROM negotiates alliance with FROM.FROM
	id = generic_events.12
	title = generic_events.12.t
	desc = generic_events.12.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.12 option generic_events.12.a"
		name = generic_events.12.a
		effect_tooltip = {
			add_to_faction = FROM.FROM
		}
		FROM.FROM = {
			country_event = generic_events.13
		}
		effect_tooltip = {
			FROM = {
				country_event = generic_events.14
			}
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.12 option generic_events.12.b"
		name = generic_events.12.b
		ai_chance = {
			base = 0
		}
		FROM.FROM = {
			country_event = generic_events.15
		}
		effect_tooltip = {
			FROM = {
				country_event = generic_events.16
			}
		}
	}
}

country_event = {
	#Faction leader accepts (for new member)
	id = generic_events.13
	title = generic_events.13.t
	desc = generic_events.13.d
	is_triggered_only = yes
	immediate = {
		hidden_effect = {
			FROM.FROM = {
				country_event = generic_events.14
			}
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.13 option generic_events.13.a"
		name = generic_events.13.a
		FROM = {
			add_to_faction = ROOT
		}
	}
}

country_event = {
	#Faction leader accepts (for negotiator)
	id = generic_events.14
	title = generic_events.14.t
	desc = generic_events.14.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.14 option generic_events.14.a"
		name = generic_events.14.a
		effect_tooltip = {
			faction_leader = {
				add_to_faction = FROM
			}
		}
	}
}

country_event = {
	#Faction leader refuses
	id = generic_events.15
	title = generic_events.15.t
	desc = generic_events.15.d
	is_triggered_only = yes
	immediate = {
		hidden_effect = {
			FROM.FROM = {
				country_event = generic_events.16
			}
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.15 option generic_events.15.a"
		name = generic_events.15.a
		add_opinion_modifier = {
			target = FROM
			modifier = generic_outraged_opinion
		}
	}
}

country_event = {
	#Faction leader accepts (for new member FROM.FROM)
	id = generic_events.16
	title = generic_events.16.t
	desc = generic_events.16.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.16 option generic_events.16.a"
		name = generic_events.16.a
		FROM.FROM = {
			reverse_add_opinion_modifier = {
				target = ROOT
				modifier = generic_outraged_opinion
			}
		}
	}
}

country_event = {
	#FROM refuses
	id = generic_events.17
	title = generic_events.17.t
	desc = generic_events.17.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.17 option generic_events.17.a"
		name = generic_events.17.a
		add_opinion_modifier = {
			target = FROM
			modifier = generic_outraged_opinion
		}
	}
}

country_event = {
	#Country is invited to faction
	id = generic_events.18
	title = generic_events.18.t
	desc = generic_events.18.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.18 option generic_events.18.a"
		name = generic_events.18.a
		effect_tooltip = {
			var:FROM.faction_leader = {
				add_to_faction = ROOT
			}
		}
		FROM = {
			country_event = generic_events.19
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.18 option generic_events.18.b"
		name = generic_events.18.b
		ai_chance = {
			base = 0
		}
		FROM = {
			country_event = generic_events.20
		}
	}
}

country_event = {
	#FROM accepts
	id = generic_events.19
	title = generic_events.19.t
	desc = generic_events.19.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.19 option generic_events.19.a"
		name = generic_events.19.a
		faction_leader = {
			add_to_faction = FROM
		}
	}
}

country_event = {
	#FROM refuses
	id = generic_events.20
	title = generic_events.20.t
	desc = generic_events.20.d
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.20 option generic_events.20.a"
		name = generic_events.20.a
		add_opinion_modifier = {
			target = FROM
			modifier = generic_outraged_opinion
		}
	}
}

country_event = {
	#event to remove the alert after ten days (donotlog)
	id = generic_events.25
	hidden = yes
	trigger = {
		is_in_array = {
			global.faction_joining_alerts = THIS
		}
	}
	is_triggered_only = yes
	option = {
		remove_from_array = {
			global.faction_joining_alerts = THIS
		}
		set_variable_to_random = global.kaiserreich_alerts_dirty
	}
}

#########################
### Incoming War-ning ###
#########################
# Warning about impending declaration of war (used for decisions)
country_event = {
	#donotlog
	id = generic_events.30
	hidden = yes
	is_triggered_only = yes
	option = {
		every_other_country = {
			limit = {
				OR = {
					is_ally_with = ROOT
					has_guaranteed = ROOT
					civilwar_target = ROOT
				}
			}
			setup_decision_attack_AI = yes
		}
		every_country = {
			limit = {
				is_ai = no
				OR = {
					is_ally_with = ROOT
					has_guaranteed = ROOT
					civilwar_target = ROOT
				}
				NOT = {
					is_ally_with = FROM
				}
			}
			set_variable = {
				alert_war_target_@FROM = ROOT
			}
			add_to_array = {
				incoming_war_alerts = FROM
			}
			scoped_sound_effect = alert_enemy_generate_wargoal_sound
		}
		set_variable_to_random = global.kaiserreich_alerts_dirty
	}
}

country_event = {
	id = generic_events.31	#donotlog
	title = generic_events.30.t
	desc = generic_events.31.d
	picture = GFX_report_event_generic_towar
	is_triggered_only = yes
	trigger = {
		is_ai = no
	}
	option = {
		name = generic_events.30.a
	}
}

# Warning about impending declaration of war for allies (used for decisions)
country_event = {
	id = generic_events.32	#donotlog
	title = generic_events.30.t
	desc = generic_events.32.d
	picture = GFX_report_event_generic_towar
	is_triggered_only = yes
	trigger = {
		is_ai = no
	}
	option = {
		name = generic_events.30.a
	}
}

# country_event = {
# 	#donotlog
# 	id = generic_events.50
# 	hidden = yes
# 	is_triggered_only = yes
# 	trigger = {
# 		GER = {
# 			exists = yes
# 			is_ally_with = ROOT
# 		}
# 		NOT = {
# 			has_variable = GER_faction
# 		}
# 	}
# 	immediate = {
# 		every_other_country = {
# 			limit = {
# 				OR = {
# 					AND = {
# 						ENT = {
# 							exists = yes
# 						}
# 						is_ally_with = ENT
# 					}
# 					AND = {
# 						INT = {
# 							exists = yes
# 						}
# 						is_ally_with = INT
# 					}
# 				}
# 			}
# 			add_opinion_modifier = {
# 				target = ROOT
# 				modifier = KR_factional_rivalry
# 			}
# 			if = {
# 				limit = {
# 					is_ally_with = INT
# 				}
# 				embargo_PREV = yes
# 			}
# 		}
# 		set_variable = {
# 			GER_faction = 1
# 		}
# 	}
# }
# country_event = {
# 	#donotlog
# 	id = generic_events.51
# 	hidden = yes
# 	is_triggered_only = yes
# 	trigger = {
# 		has_variable = GER_faction
# 		GER = {
# 			exists = yes
# 			NOT = {
# 				is_ally_with = ROOT
# 			}
# 		}
# 	}
# 	immediate = {
# 		every_other_country = {
# 			limit = {
# 				OR = {
# 					AND = {
# 						ENT = {
# 							exists = yes
# 						}
# 						is_ally_with = ENT
# 					}
# 					AND = {
# 						INT = {
# 							exists = yes
# 						}
# 						is_ally_with = INT
# 					}
# 				}
# 			}
# 			remove_opinion_modifier = {
# 				target = ROOT
# 				modifier = KR_factional_rivalry
# 			}
# 			ROOT = {
# 				remove_opinion_modifier = {
# 					target = PREV
# 					modifier = KR_factional_rivalry
# 				}
# 			}
# 			clear_embargo_PREV = yes
# 		}
# 		clear_variable = GER_faction
# 	}
# }
# country_event = {
# 	#donotlog
# 	id = generic_events.52
# 	hidden = yes
# 	is_triggered_only = yes
# 	trigger = {
# 		ENT = {
# 			exists = yes
# 			is_ally_with = ROOT
# 		}
# 		NOT = {
# 			has_variable = ENT_faction
# 		}
# 	}
# 	immediate = {
# 		every_other_country = {
# 			limit = {
# 				OR = {
# 					AND = {
# 						GER = {
# 							exists = yes
# 						}
# 						is_ally_with = GER
# 					}
# 					AND = {
# 						INT = {
# 							exists = yes
# 						}
# 						is_ally_with = INT
# 					}
# 				}
# 			}
# 			add_opinion_modifier = {
# 				target = ROOT
# 				modifier = KR_factional_rivalry
# 			}
# 			if = {
# 				limit = {
# 					INT = {
# 						exists = yes
# 					}
# 					is_ally_with = INT
# 				}
# 				embargo_PREV = yes
# 			}
# 		}
# 		set_variable = {
# 			ENT_faction = 1
# 		}
# 	}
# }
# country_event = {
# 	#donotlog
# 	id = generic_events.53
# 	hidden = yes
# 	is_triggered_only = yes
# 	trigger = {
# 		has_variable = ENT_faction
# 		ENT = {
# 			exists = yes
# 			NOT = {
# 				is_ally_with = ROOT
# 			}
# 		}
# 	}
# 	immediate = {
# 		every_other_country = {
# 			limit = {
# 				OR = {
# 					AND = {
# 						GER = {
# 							exists = yes
# 						}
# 						is_ally_with = GER
# 					}
# 					AND = {
# 						INT = {
# 							exists = yes
# 						}
# 						is_ally_with = INT
# 					}
# 				}
# 			}
# 			remove_opinion_modifier = {
# 				target = ROOT
# 				modifier = KR_factional_rivalry
# 			}
# 			ROOT = {
# 				remove_opinion_modifier = {
# 					target = PREV
# 					modifier = KR_factional_rivalry
# 				}
# 			}
# 			clear_embargo_PREV = yes
# 		}
# 		clear_variable = ENT_faction
# 	}
# }
# country_event = {
# 	#donotlog
# 	id = generic_events.54
# 	hidden = yes
# 	is_triggered_only = yes
# 	trigger = {
# 		INT = {
# 			exists = yes
# 			is_ally_with = ROOT
# 		}
# 		NOT = {
# 			has_variable = INT_faction
# 		}
# 	}
# 	immediate = {
# 		every_other_country = {
# 			limit = {
# 				OR = {
# 					AND = {
# 						GER = {
# 							exists = yes
# 						}
# 						is_ally_with = GER
# 					}
# 					AND = {
# 						ENT = {
# 							exists = yes
# 						}
# 						is_ally_with = ENT
# 					}
# 				}
# 			}
# 			add_opinion_modifier = {
# 				target = ROOT
# 				modifier = KR_factional_rivalry
# 			}
# 			embargo_PREV = yes
# 		}
# 		set_variable = {
# 			INT_faction = 1
# 		}
# 	}
# }
# country_event = {
# 	#donotlog
# 	id = generic_events.55
# 	hidden = yes
# 	is_triggered_only = yes
# 	trigger = {
# 		has_variable = INT_faction
# 		INT = {
# 			exists = yes
# 			NOT = {
# 				is_ally_with = ROOT
# 			}
# 		}
# 	}
# 	immediate = {
# 		every_other_country = {
# 			limit = {
# 				OR = {
# 					AND = {
# 						GER = {
# 							exists = yes
# 						}
# 						is_ally_with = GER
# 					}
# 					AND = {
# 						INT = {
# 							exists = yes
# 						}
# 						is_ally_with = INT
# 					}
# 				}
# 			}
# 			remove_opinion_modifier = {
# 				target = ROOT
# 				modifier = KR_factional_rivalry
# 			}
# 			ROOT = {
# 				remove_opinion_modifier = {
# 					target = PREV
# 					modifier = KR_factional_rivalry
# 				}
# 			}
# 			clear_embargo_PREV = yes
# 		}
# 		clear_variable = INT_faction
# 	}
# }
country_event = {
	id = generic_events.75
	title = generic_events.75.t
	desc = generic_events.75.d
	picture = GFX_report_event_generic_diplomacy2
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.75 option generic_events.75.a"
		name = generic_events.75.a		#return all land
		ai_chance = {
			base = 1
		}
		clr_country_flag = KR_returning_land
		custom_effect_tooltip = KR_will_return_all
		hidden_effect = {
			event_target:return_to = {
				country_event = generic_events.76
			}
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.75 option generic_events.75.b"
		name = generic_events.75.b		#return all land but vital provinces
		trigger = {
			any_owned_state = {
				OR = {
					is_core_of = event_target:return_to
					is_claimed_by = event_target:return_to
				}
				is_claim_or_core_of_ROOT = no
				is_important_state = yes
				NOT = {
					has_variable = can_integrate_@ROOT
				}
				NOT = {
					any_country_with_core = {
						has_variable = ROOT.can_integrate_@THIS
					}
				}
				NOT = {
					has_state_flag = KR_keeping_state@ROOT
				}
			}
		}
		ai_chance = {
			base = 100
		}
		custom_effect_tooltip = KR_will_return_rest
		hidden_effect = {
			clr_country_flag = KR_returning_land
			every_owned_state = {
				limit = {
					OR = {
						is_core_of = event_target:return_to
						is_claimed_by = event_target:return_to
					}
					is_claim_or_core_of_ROOT = no
					is_important_state = yes
					NOT = {
						has_state_flag = KR_keeping_state@ROOT
					}
				}
				set_state_flag = KR_keeping_state@ROOT
			}
			if = {
				limit = {
					any_owned_state = {
						OR = {
							is_core_of = event_target:return_to
							is_claimed_by = event_target:return_to
						}
						is_claim_or_core_of_ROOT = no
						is_important_state = no
						NOT = {
							has_variable = can_integrate_@ROOT
						}
						NOT = {
							any_country_with_core = {
								has_variable = ROOT.can_integrate_@THIS
							}
						}
						NOT = {
							has_state_flag = KR_keeping_state@ROOT
						}
						OR = {
							is_coastal = yes
							any_neighbor_state = {
								is_owned_by = event_target:return_to
							}
						}
					}
				}
				event_target:return_to = {
					country_event = generic_events.76
				}
			}
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.75 option generic_events.75.c"
		name = generic_events.75.c		#return cores only
		trigger = {
			is_ai = no
			any_owned_state = {
				is_claim_or_core_of_ROOT = no
				is_important_state = no
				NOT = {
					has_variable = can_integrate_@ROOT
				}
				NOT = {
					any_country_with_core = {
						has_variable = ROOT.can_integrate_@THIS
					}
				}
				NOT = {
					has_state_flag = KR_keeping_state@ROOT
				}
				is_core_of = event_target:return_to
			}
			any_owned_state = {
				is_claim_or_core_of_ROOT = no
				is_important_state = no
				NOT = {
					has_variable = can_integrate_@ROOT
				}
				NOT = {
					any_country_with_core = {
						has_variable = ROOT.can_integrate_@THIS
					}
				}
				NOT = {
					has_state_flag = KR_keeping_state@ROOT
				}
				NOT = {
					is_core_of = event_target:return_to
				}
				is_claimed_by = event_target:return_to
			}
		}
		custom_effect_tooltip = KR_will_return_cores
		hidden_effect = {
			clr_country_flag = KR_returning_land
			every_owned_state = {
				limit = {
					is_claim_or_core_of_ROOT = no
					NOT = {
						has_variable = can_integrate_@ROOT
					}
					NOT = {
						any_country_with_core = {
							has_variable = ROOT.can_integrate_@THIS
						}
					}
					NOT = {
						has_state_flag = KR_keeping_state@ROOT
					}
					NOT = {
						is_core_of = event_target:return_to
					}
					is_claimed_by = event_target:return_to
				}
				set_state_flag = KR_keeping_state@ROOT
			}
			event_target:return_to = {
				country_event = generic_events.76
			}
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.75 option generic_events.75.e"
		name = generic_events.75.e		#keep it all you pig
		ai_chance = {
			base = 0
		}
		clr_country_flag = KR_returning_land
		custom_effect_tooltip = KR_will_not_return
		hidden_effect = {
			every_owned_state = {
				limit = {
					OR = {
						is_core_of = event_target:return_to
						is_claimed_by = event_target:return_to
					}
					is_claim_or_core_of_ROOT = no
					NOT = {
						has_variable = can_integrate_@ROOT
					}
					NOT = {
						any_country_with_core = {
							has_variable = ROOT.can_integrate_@THIS
						}
					}
					NOT = {
						has_state_flag = KR_keeping_state@ROOT
					}
				}
				set_state_flag = KR_keeping_state@ROOT
			}
		}
	}
}

# Cores/claims have been returned by an ally
country_event = {
	id = generic_events.76
	title = generic_events.76.t
	desc = generic_events.76.d
	picture = GFX_report_event_generic_diplomacy2
	is_triggered_only = yes
	option = {
		log = "[GetLogInfo]: event generic_events.76 option generic_events.76.a"
		name = generic_events.76.a
		add_opinion_modifier = {
			target = FROM
			modifier = generic_returned_land_opinion
		}
		set_temp_variable = {
			tag_to_release = ROOT
		}
		while_loop_effect = {
			limit = {
				FROM = {
					any_owned_state = {
						is_claim_or_core_of_ROOT = yes
						is_claim_or_core_of_FROM = no
						NOT = {
							has_variable = can_integrate_@FROM
						}
						NOT = {
							any_country_with_core = {
								has_variable = FROM.can_integrate_@THIS
							}
						}
						OR = {
							is_coastal = yes
							any_neighbor_state = {
								is_owned_by = ROOT
							}
						}
						NOT = {
							has_state_flag = KR_keeping_state@FROM
						}
					}
				}
			}
			FROM = {
				every_owned_state = {
					limit = {
						is_claim_or_core_of_ROOT = yes
						is_claim_or_core_of_FROM = no
						NOT = {
							has_variable = can_integrate_@FROM
						}
						NOT = {
							any_country_with_core = {
								has_variable = FROM.can_integrate_@THIS
							}
						}
						OR = {
							is_coastal = yes
							any_neighbor_state = {
								is_owned_by = ROOT
							}
						}
						NOT = {
							has_state_flag = KR_keeping_state@FROM
						}
					}
					transfer_state_without_overriding_occupation = yes
				}
			}
		}
	}
}

##