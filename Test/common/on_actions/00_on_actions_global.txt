### GLOBAL ON ACTIONS FILE ###
### COUNTRY-SPECIFIC ACTIONS SHOULD GO INTO THEIR OWN FILES ###
### DON'T EDIT THIS FILE WITHOUT CHECKING IN THE CODING CHANNEL FIRST ###
on_actions = {
	### LaR DLC
	# called when an operative performing an offensive mission in a country
	# has been spotted
	on_operative_on_mission_spotted = {
		effect = {
			log = "[GetDateText] [From.GetName]: on_operative_on_mission_spotted in [Root.GetName] OPERATIVE: [This.GetName]"
			# SCOPE the operative
			# ROOT   the country the operative was performing its mission in
			# FROM   the country the operative is operating for
			# base values
			set_temp_variable = {
				var = capture_chance
				value = 90
			}
			set_temp_variable = {
				var = kill_chance
				value = 10
			}
			# nullify kill chance for some missions
			if = {
				limit = {
					OR = {
						operative_leader_mission = control_trade
						operative_leader_mission = diplomatic_pressure
					}
				}
				set_temp_variable = {
					var = kill_chance
					value = 0
				}
			}
			#Capture chance modifier unused as it would just increased or decrease death chance
			multiply_temp_variable = {
				var = capture_chance
				value = own_capture_chance_factor				# the operative's capture chance modifiers
			}
			clamp_temp_variable = {
				var = capture_chance
				min = 0
				max = 100
			}
			random_list = {
				#log = yes # log picked effect in game.log
				temp_var:capture_chance = {
					capture_operative = {
						captured_by = ROOT
					}
				}
				temp_var:kill_chance = {
					kill_operative = {
						killed_by = ROOT
					}
				}
			}
		}
	}
	on_operative_captured = {
		effect = {
			log = "[GetDateText] [From.GetName]: on_operative_captured by [Root.GetName] OPERATIVE: [This.GetName]"
			# SCOPE the operative
			# ROOT   the country the operative was performing its mission in
			# FROM   the country the operative is operating for
			operative_leader_event = {
				id = lar_operative_event.6
				recipient = ROOT
				originator = ROOT
				set_from_from = ROOT
				set_from = FROM
				days = 1
			}
			random_list = {
				log = yes
				90 = {
					#regular
					operative_leader_event = {
						id = lar_operative_event.1
						set_from_from = ROOT
					}
				}
				10 = {
					#operative turned
					modifier = {
						has_trait = operative_tough
						factor = 0						#tough operatives never get turned
					}
					modifier = {
						has_trait = operative_double_agent
						factor = 0						#no tripple agents please
					}
					turn_operative = {
						turned_by = ROOT
					}
					# ensure the operative has the nationality of the country he is coming from
					add_nationality = FROM
					operative_leader_event = {
						id = lar_operative_event.5
						set_from_from = FROM						#tells the event which nationality to add
					}
				}
			}
		}
	}
	on_operative_death = {
		effect = {
			# SCOPE the operative
			# ROOT   the killer country (optional)
			# FROM   the country the operative is operating for
			if = {
				limit = {
					country_exists = ROOT
				}
				log = "[GetDateText] [From.GetName]: on_operative_death, killed by [Root.GetName] OPERATIVE: [This.GetName]"
				# operative killed by a country, likelly while on mission
				operative_leader_event = {
					id = lar_operative_event.3
					set_from_from = ROOT
				}
			}
			else = {
				# other cause of death
				log = "[GetDateText] [From.GetName]: on_operative_death OPERATIVE: [This.GetName]"
			}
		}
	}
	# SCOPE_UNIT_LEADER [
	#	ROOT, FROM
	#	FROM.FROM : SCOPE_STATE ( will only be set if the operation has a specific selection_target )
	# ]
	on_operative_detected_during_operation = {
		effect = {
			log = "[GetDateText] [From.GetName]: on_operative_detected_during_operation OPERATIVE: [This.GetName]"
			random_list = {
				45 = {
					force_operative_leader_into_hiding = 45
					operative_leader_event = {
						id = lar_operative_event.2
						set_from_from = FROM
					}
				}
				25 = {
					capture_operative = {
						captured_by = FROM
					}
				}
				25 = {
					harm_operative_leader = 90
					operative_leader_event = {
						id = lar_operative_event.4
						set_from_from = FROM
					}
				}
				5 = {
					kill_operative = {
						killed_by = FROM
					}
				}
			}
		}
	}
	# scope is operative
	# from scope is the country
	on_operative_created = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_operative_created"
			# add_operative_nationalities = yes
		}
	}
	on_operation_completed = {
		effect = {
			# same scope setup as in operation outcome:
			# THIS: the operation
			# ROOT: the initiating country
			# FROM: the target country
			log = "[GetDateText] [Root.GetName]: on_operation_completed OPERATION: [This.GetName] TARGET: [From.GetName]"
			if = {
				limit = {
					ROOT = {
						has_country_flag = just_freed_operative_flag
					}
				}
				every_operative = {
					if = {
						limit = {
							NOT = {
								has_trait = operative_escape_artist
							}
						}
						random_list = {
							15 = {
								add_unit_leader_trait = operative_escape_artist
							}
							85 = {
							}
						}
					}
				}
				ROOT = {
					clr_country_flag = just_freed_operative_flag
				}
			}
			every_operative = {
				#add target nationality if linguist
				if = {
					limit = {
						has_trait = operative_linguist
						NOT = {
							has_nationality = FROM
						}
					}
					random_list = {
						20 = {
							add_nationality = FROM
						}
						80 = {
						}
					}
				}
			}
		}
	}
	on_weekly = {
		effect = {
			# update intelligence agency AI
			if = {
				limit = {
					has_intelligence_agency = yes
					is_ai = yes
				}
				update_operation_ai = yes
			}
		}
	}
	on_monthly = {
		# effect = {
		# 	#Faction Opinion Modifiers
		# 	country_event = generic_events.51
		# 	country_event = generic_events.53
		# 	country_event = generic_events.55
		# 	# maintain list of guarantors
		# 	if = {
		# 		limit = {
		# 			has_variable = guarantor_array^num
		# 		}
		# 		#the array exists
		# 		for_each_loop = {
		# 			array = guarantor_array
		# 			if = {
		# 				limit = {
		# 					NOT = {
		# 						is_guaranteed_by = var:v
		# 					}
		# 				}
		# 				add_to_temp_array = {
		# 					guarantors_to_remove = v
		# 				}
		# 			}
		# 		}
		# 		if = {
		# 			limit = {
		# 				check_variable = {
		# 					guarantors_to_remove^num = guarantor_array^num
		# 				}
		# 			}
		# 			clear_array = guarantor_array
		# 		}
		# 		else = {
		# 			for_each_loop = {
		# 				array = guarantors_to_remove
		# 				remove_from_array = {
		# 					guarantor_array = v
		# 				}
		# 			}
		# 		}
		# 	}
		# 	### Data logging - do not touch this section
		# 	#if = {
		# 		# limit = {
		# 		# 	is_valid_tag_for_data_logging = yes
		# 		# 	check_variable = {
		# 		# 		var = THIS.KR_data_logging_months
		# 		# 		value = 2
		# 		# 	}
		# 		# }
		# 		# if = {
		# 		# 	limit = {
		# 		# 		tag = AUS
		# 		# 	}
		# 		# 	set_temp_variable = {
		# 		# 		AUS.empire_num_divisions = num_divisions
		# 		# 	}
		# 		# 	set_temp_variable = {
		# 		# 		AUS.empire_num_wanted_divisions = ai_wants_divisions
		# 		# 	}
		# 		# 	set_temp_variable = {
		# 		# 		AUS.empire_num_max_divisions = max_divisions
		# 		# 	}
		# 		# 	set_temp_variable = {
		# 		# 		AUS.empire_civ_industry = num_of_civilian_factories
		# 		# 	}
		# 		# 	set_temp_variable = {
		# 		# 		AUS.empire_mil_industry = num_of_military_factories
		# 		# 	}
		# 		# 	set_temp_variable = {
		# 		# 		AUS.empire_nav_industry = num_of_naval_factories
		# 		# 	}
		# 		# 	every_other_country = {
		# 		# 		limit = {
		# 		# 			has_autonomy_state = crownland
		# 		# 		}
		# 		# 		add_to_variable = {
		# 		# 			var = AUS.empire_num_divisions
		# 		# 			value = num_divisions
		# 		# 		}
		# 		# 		add_to_variable = {
		# 		# 			var = AUS.empire_num_wanted_divisions
		# 		# 			value = ai_wants_divisions
		# 		# 		}
		# 		# 		add_to_variable = {
		# 		# 			var = AUS.empire_num_max_divisions
		# 		# 			value = max_divisions
		# 		# 		}
		# 		# 		add_to_variable = {
		# 		# 			var = AUS.empire_civ_industry
		# 		# 			value = num_of_civilian_factories
		# 		# 		}
		# 		# 		add_to_variable = {
		# 		# 			var = AUS.empire_mil_industry
		# 		# 			value = num_of_military_factories
		# 		# 		}
		# 		# 		add_to_variable = {
		# 		# 			var = AUS.empire_nav_industry
		# 		# 			value = num_of_naval_factories
		# 		# 		}
		# 		# 	}
		# 		# 	log = "KR_division_data;[GetYear].[GetMonth];[Root.GetTag];[?AUS.empire_num_divisions];[?AUS.empire_num_wanted_divisions];[?AUS.empire_num_max_divisions]"
		# 		# 	log = "KR_industry_data;[GetYear].[GetMonth];[Root.GetTag];[?AUS.empire_civ_industry];[?AUS.empire_mil_industry];[?AUS.empire_nav_industry]"
		# 		# }
		# 		# else = {
		# 		# 	log = "KR_division_data;[GetYear].[GetMonth];[Root.GetTag];[?num_divisions];[?ai_wants_divisions];[?max_divisions]"
		# 		# 	log = "KR_industry_data;[GetYear].[GetMonth];[Root.GetTag];[?num_of_civilian_factories];[?num_of_military_factories];[?num_of_naval_factories]"
		# 		# }
		# 		# clear_variable = THIS.KR_data_logging_months
		# 	#}
		# 	# else_if = {
		# 	# 	limit = {
		# 	# 		is_valid_tag_for_data_logging = yes
		# 	# 		NOT = {
		# 	# 			check_variable = {
		# 	# 				var = THIS.KR_data_logging_months
		# 	# 				value = 2
		# 	# 			}
		# 	# 		}
		# 	# 	}
		# 	# 	add_to_variable = {
		# 	# 		THIS.KR_data_logging_months = 1
		# 	# 	}
		# 	# }
		# 	# else_if = {
		# 	# 	# Debug tag for global values logging
		# 	# 	limit = {
		# 	# 		tag = BHU
		# 	# 	}
		# 	# 	log = "KR_tension_data;[GetYear].[GetMonth];[?global.threat]"
		# 	# }
		# }
	}
	on_startup = {
		effect = {
			every_state = {
				create_ambition_areas = yes
				if = {
					limit = {
						OR = {
							has_state_category = wasteland
							has_state_category = major_port
							has_state_category = port
							has_state_category = minor_port
							has_state_category = one_island
							has_state_category = zero_island
						}
					}
					set_state_flag = is_insignificant_state_for_peace_conference
				}
			}
		}
	}
	#FROM is war target
	on_declare_war = {
		effect = {
			log = "[GetDateText] [Root.GetName] has declared war on [From.GetName]"
			FROM = {
				set_country_flag = had_war
			}
			ROOT = {
				set_country_flag = had_war
			}
		}
	}
	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_state_control_changed OLD CONTROLLER: [From.GetName] STATE: [From.From.GetName]"
			### Endonym Check
			if = {
				limit = {
					has_global_flag = allowrenaming_flag
				}
				FROM.FROM = {
					rename_state_effect = yes
				}
			}
			### Annexation Check
			# if = {
			# 	limit = {
			# 		owns_state = FROM.FROM
			# 		FROM.FROM = {
			# 			has_state_flag = annexation_trigger_state
			# 		}
			# 	}
			# 	recheck_annexations = yes
			# }
			# ### Operative Nationality Check
			# if = {
			# 	limit = {
			# 		is_operative_copy_country = yes
			# 		NOT = {
			# 			has_country_flag = KR_operative_nationality_check
			# 		}
			# 	}
			# 	set_country_flag = KR_operative_nationality_check
			# 	country_event = generic_events.209
			# }
			### Integration Check
			FROM.FROM = {
				if = {
					limit = {
						NOT = {
							is_core_of = ROOT
						}
						impassable = no
					}
					if = {
						limit = {
							any_country_with_core = {
								has_variable = ROOT.can_integrate_@THIS
								set_temp_variable = {
									integration_target = THIS
								}
							}
						}
						if = {
							limit = {
								NOT = {
									AND = {
										has_resistance = yes
										occupied = {
											has_variable = ROOT.can_integrate_@THIS
										}
									}
								}
							}
							if = {
								limit = {
									has_resistance = yes
								}
								set_temp_variable = {
									previous_compliance = compliance
								}
								set_temp_variable = {
									previous_resistance = resistance
								}
								cancel_resistance = yes
							}
							start_resistance = var:integration_target
							set_compliance = var:previous_compliance
							set_resistance = var:previous_resistance
						}
						ROOT = {
							var:integration_target = {
								set_occupation_law_where_available = territorial_integration
							}
						}
					}
					else_if = {
						limit = {
							has_variable = can_integrate_@ROOT
						}
						start_state_integration_resistance = yes
					}
					else = {
						clear_state_integration_resistance = yes
					}
				}
				else = {
					clear_state_integration_resistance = yes
				}
			}
		}
	}
	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_annex = {
		effect = {
			log = "[GetDateText] [Root.GetName] has annexed [From.GetName]"
			FROM = {
				# end_coalition = yes
				# leave_economic_sphere = yes
				# clr_country_flag = KR_can_raise_autonomy_level
				# clr_country_flag = KR_can_become_free
				# clr_country_flag = KR_operative_nationality_check
				# clr_country_flag = GER_capitulated
				# reset dynamic tags
				if = {
					limit = {
						is_dynamic_country = yes
						NOT = {
							has_country_flag = reserved_dynamic_tag
						}
					}
					drop_cosmetic_tag = yes
					#clear_government_flags = yes
					every_state = {
						remove_claim_by = PREV
					}
				}
				# clear notifications
				if = {
					limit = {
						is_in_array = {
							global.faction_joining_alerts = THIS
						}
					}
					remove_from_array = {
						global.faction_joining_alerts = THIS
					}
				}
				# clear tag cores and claims if set to
				if = {
					limit = {
						remove_cores_of_tag_if_non_existent = yes
					}
					clear_cores_of_tag_if_possible = yes
					every_state = {
						remove_claim_by = FROM
					}
				}
				#clear embargo flags
				every_possible_country = {
					clear_embargo_PREV = yes
				}
			}
			#recheck_annexations = yes
			every_occupied_country = {
				limit = {
					has_variable = ROOT.can_integrate_@THIS
				}
				set_occupation_law_where_available = territorial_integration
			}
		}
	}
	# called a country fully decrypts cipher of a target country
	# scope is the target country that its cipher is decrypted
	# from scope is the decrypter country
	on_fully_decrypted_cipher = {
		effect = {
			log = "[GetDateText] [From.GetName]: on_fully_decrypted_cipher TARGET: [Root.GetName]"
		}
	}
	# called when a country activates its active cipher bonuses against a target
	# scope is the target country
	# from scope is the country that activates its bonuses
	on_activated_active_decryption_bonuses = {
		effect = {
			log = "[GetDateText] [From.GetName]: on_activated_active_decryption_bonuses TARGET: [Root.GetName]"
		}
	}
	#ROOT is subject FROM is previous overlord
	on_subject_free = {
		effect = {
		}
	}
	#ROOT is subject FROM is overlord
	on_subject_autonomy_level_change = {
		effect = {
		}
	}
	#ROOT is subject FROM is overlord
	on_subject_annexed = {
		effect = {
		}
	}
	on_government_change = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_government_change"
			if = {
				limit = {
					has_global_flag = allowrenaming_flag
				}
				every_controlled_state = {
					rename_state_effect = yes
				}
			}
		}
	}
	on_ruling_party_change = {
		# temp var old_ideology_token is available for effects
		effect = {
		}
	}
	#ROOT is winner, FROM is loser (called for all winners against all losers)
	on_peaceconference_started = {
		effect = {
			log = "[GetDateText] on_peaceconference_started ROOT = [Root.GetName] FROM = [From.GetName]"
			#set up PC country arrays
			if = {
				limit = {
					NOT = {
						has_global_flag = KR_set_up_pc_arrays
					}
				}
				set_global_flag = KR_set_up_pc_arrays
				every_country = {
					limit = {
						pc_is_winner = yes
					}
					add_to_array = {
						global.pc_winners_array = THIS
					}
					if = {
						limit = {
							is_major = yes
						}
						set_global_flag = pc_has_major_winner
					}
					if = {
						limit = {
							is_subject = no
						}
						set_global_flag = pc_has_non_subject_winner
					}
				}
				every_country = {
					limit = {
						pc_is_loser = yes
					}
					add_to_array = {
						global.pc_losers_array = THIS
					}
				}
			}
		}
	}
	#ROOT is winner #FROM is loser
	on_peaceconference_ended = {
		effect = {
			log = "[GetDateText] on_peaceconference_ended ROOT = [Root.GetName] FROM = [From.GetName]"
			#Remove redundant wargoals
			if = {
				limit = {
					has_wargoal_against = FROM
				}
				remove_wargoal = {
					target = FROM
					type = all
				}
			}
			FROM = {
				if = {
					limit = {
						has_wargoal_against = ROOT
					}
					remove_wargoal = {
						target = ROOT
						type = all
					}
				}
			}
			# Important countries for logalyzer
			FROM = {
			}
			# post-PC data cleanup
			if = {
				limit = {
					set_temp_variable = {
						last_winner_index = global.pc_winners_array^num
					}
					subtract_from_temp_variable = {
						last_winner_index = 1
					}
					check_variable = {
						global.pc_winners_array^last_winner_index = ROOT
					}
					set_temp_variable = {
						last_loser_index = global.pc_losers_array^num
					}
					subtract_from_temp_variable = {
						last_loser_index = 1
					}
					check_variable = {
						global.pc_losers_array^last_loser_index = FROM
					}
				}
				clr_global_flag = KR_set_up_pc_arrays
				clr_global_flag = pc_has_major_winner
				clr_global_flag = pc_has_non_subject_winner
				clear_array = global.pc_winners_array
				clear_array = global.pc_losers_array
				# every_country = {
				# 	recheck_annexations = yes
				# }
			}
			# remove the force-surrender idea, just in case it's still there
			# FROM = {
			# 	remove_ideas = ready_to_surrender
			# }
			### transfer impassables to the correct targets
			for_each_scope_loop = {
				array = global.paired_impassable_states
				if = {
					limit = {
						NOT = {
							is_owned_by = var:paired_impassable:owner
						}
					}
					transfer_state_to = paired_impassable:owner
				}
			}
			### give temporary military access after scripted peaces
			if = {
				limit = {
					country_exists = ROOT
					country_exists = FROM
					NOT = {
						is_neighbor_of = FROM
					}
					NOT = {
						is_ally_with = FROM
					}
					#just in case
					NOT = {
						FROM = {
							any_neighbor_country = {
								is_ally_with = ROOT
							}
						}
					}
				}
				if = {
					limit = {
						any_owned_state = {
							FROM = {
								divisions_in_state = {
									state = PREV
									size > 0
								}
							}
						}
					}
					give_military_access = FROM
				}
				FROM = {
					if = {
						limit = {
							any_owned_state = {
								ROOT = {
									divisions_in_state = {
										state = PREV
										size > 0
									}
								}
							}
						}
						give_military_access = ROOT
					}
				}
			}
		}
	}
	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			log = "[GetDateText] [Root.GetName] (ROOT) on_capitulation FROM = [From.GetName]"
			news_event = country_capitulated.0
		}
	}
	# ROOT is capitulated country, FROM is winner
	on_capitulation_immediate = {
		effect = {
		}
	}
	# ROOT is previously capitulated country
	on_uncapitulation = {
		effect = {
		}
	}
	on_leave_faction = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_leave_faction FROM = [From.GetName]"
			FROM = {
				add_opinion_modifier = {
					modifier = faction_traitor
					target = ROOT
					days = 365
				}
				add_opinion_modifier = {
					modifier = faction_traitor_trade
					target = ROOT
					days = 365
				}
			}
		}
	}
	# FROM = country receiving guarantee, ROOT = country giving guarantee
	on_guarantee = {
		effect = {
			log = "[GetDateText] [Root.GetName] has guaranteed [From.GetName]"
			if = {
				limit = {
					NOT = {
						is_in_array = {
							FROM.guarantor_array = ROOT
						}
					}
				}
				add_to_array = {
					FROM.guarantor_array = ROOT
				}
			}
		}
	}
	# FROM = country giving access, ROOT = country asking for access
	on_military_access = {
		effect = {
			log = "[GetDateText] [Root.GetName] has asked for military access to [From.GetName]"
		}
	}
	# FROM = country receiving access, ROOT = country offering access
	on_offer_military_access = {
		effect = {
			log = "[GetDateText] [Root.GetName] has offered military access to [From.GetName]"
		}
	}
	# FROM = country being called, ROOT = country calling
	on_call_allies = {
		effect = {
			log = "[GetDateText] [Root.GetName] has called its ally [From.GetName] into its war"
			#Important countries for logalyzer
			if = {
				limit = {
					ROOT = {
						tag = EGY
					}
					FROM = {
						tag = LBA
					}
				}
				log = "KR_Event_Logging;Cyrenaica REVOLTS AGAINST OTT;[GetDateText]"
			}
		}
	}
	# FROM = country being joined, ROOT = country joining
	on_join_allies = {
		effect = {
			log = "[GetDateText] [Root.GetName] is joining [From.GetName] in its war"
		}
	}
	# FROM = country receiving goods, ROOT = country sending goods
	on_lend_lease = {
		effect = {
			log = "[GetDateText] [Root.GetName] is offering a lend lease to [From.GetName]"
		}
	}
	# FROM = country requesting goods, ROOT = country sending goods
	on_incoming_lend_lease = {
		effect = {
			log = "[GetDateText] [From.GetName] has requested a lend lease from [From.GetName]"
		}
	}
	# FROM = country receiving volunteers, ROOT = country sending volunteers
	on_send_volunteers = {
		effect = {
			log = "[GetDateText] [Root.GetName] is sending volunteers to [From.GetName]"
		}
	}
	# FROM = country losing volunteers, ROOT = country recalling volunteers
	on_recall_volunteers = {
		effect = {
			log = "[GetDateText] [Root.GetName] is recalling volunteers from [From.GetName]"
		}
	}
	# FROM = country to which they're sent, ROOT = sending country
	on_send_expeditionary_force = {
		effect = {
			log = "[GetDateText] [Root.GetName] is sending an expeditionary force to [From.GetName]"
		}
	}
	# FROM = country from which the forces are returning, ROOT = country who sent them
	on_return_expeditionary_forces = {
		effect = {
			log = "[GetDateText] [Root.GetName] is recalling its expeditionary force from [From.GetName]"
		}
	}
	# FROM = country requesting them, ROOT = requesting country
	on_request_expeditionary_forces = {
		effect = {
			log = "[GetDateText] [Root.GetName] has requested expeditionary forces from [From.GetName]"
		}
	}
	# FROM = country on whom the wargoal is being generated, ROOT = country generating wargoal
	on_generate_wargoal = {
		effect = {
			log = "[GetDateText] [Root.GetName] is generating a wargoal on [From.GetName]"
		}
	}
	# FROM = country giving control of the state, ROOT = country asking for control of the state
	on_ask_for_state_control = {
		effect = {
			log = "[GetDateText] [Root.GetName] is asking for state control from [From.GetName]"
		}
	}
	# FROM = country accepting control of the state, ROOT = country giving control of the state
	on_give_state_control = {
		effect = {
			log = "[GetDateText] [Root.GetName] is giving state control to [From.GetName]"
		}
	}
	#FROM is state #ROOT is broken as hell
	on_nuke_drop = {
		effect = {
			news_event = {
				id = nuke_dropped.2
				days = 1
			}
			news_event = {
				id = nuke_dropped.3
				days = 1
			}
			news_event = {
				id = nuke_dropped.4
				days = 1
			}
			news_event = {
				id = nuke_dropped.5
				days = 1
			}
			news_event = {
				id = nuke_dropped.6
				days = 1
			}
			news_event = {
				id = nuke_dropped.7
				days = 1
			}
			news_event = {
				id = nuke_dropped.8
				days = 1
			}
			news_event = {
				id = nuke_dropped.9
				days = 1
			}
			news_event = {
				id = nuke_dropped.10
				days = 1
			}
			news_event = {
				id = nuke_dropped.11
				days = 1
			}
			news_event = {
				id = nuke_dropped.12
				days = 1
			}
			news_event = {
				id = nuke_dropped.13
				days = 1
			}
		}
		# random_events = {
		# 	100 = nuke_dropped.0
		# }
	}
	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}
	# country, FROM = ace, PREV = enemy ace
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}
	# country, FROM = our ace,
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}
	# country, FROM = our ace,
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}
	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}
	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord
	on_puppet = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_puppet FROM = [From.GetName]"
			ROOT = {
				clr_country_flag = KR_independence_war_overlord
				clr_country_flag = KR_independence_war
				clr_country_flag = KR_independence_refused
			}
		}
	}
	#used when liberating in a peace conference
	#ROOT = nation being liberated, FROM = overlord
	on_liberate = {
		effect = {
			log = "[GetDateText] [Root.GetName] liberating FROM = [From.GetName]"
		}
	}
	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord
	on_release_as_puppet = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_release_as_puppet FROM = [From.GetName]"
		}
	}
	#ROOT is free nation FROM is releaser
	on_release_as_free = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_release_as_free FROM = [From.GetName]"
		}
	}
	#FROM is country getting invited.
	on_offer_join_faction = {
		effect = {
			# log = "[GetDateText] [Root.GetName] on_offer_join_faction FROM = [From.GetName]"
			# FROM = {
			# 	#Faction Opinion Modifiers
			# 	country_event = generic_events.50
			# 	country_event = generic_events.52
			# 	country_event = generic_events.54
			# 	#clear any embargoes
			# 	every_other_country = {
			# 		limit = {
			# 			is_ally_with = PREV
			# 		}
			# 		clear_embargo_PREV = yes
			# 	}
			# 	if = {
			# 		limit = {
			# 			has_global_flag = TEMPORARY_DISABLED_FACTION_POPUP
			# 		}
			# 		clr_global_flag = TEMPORARY_DISABLED_FACTION_POPUP
			# 	}
			# 	else_if = {
			# 		limit = {
			# 			NOT = {
			# 				is_in_array = {
			# 					global.faction_joining_alerts = THIS
			# 				}
			# 			}
			# 		}
			# 		add_to_array = {
			# 			global.faction_joining_alerts = THIS
			# 		}
			# 		sound_effect = diplomatic_notification
			# 		set_variable_to_random = global.kaiserreich_alerts_dirty
			# 		country_event = {
			# 			id = generic_events.25
			# 			days = 10
			# 		}
			# 	}
			# }
			# #WT from faction joining
			# if = {
			# 	limit = {
			# 		NOT = {
			# 			has_global_flag = second_weltkrieg_has_started
			# 		}
			# 	}
			# 	if = {
			# 		limit = {
			# 			OR = {
			# 				original_tag = GER
			# 				original_tag = AUS
			# 				tag = ENT
			# 			}
			# 			NOT = {
			# 				FROM = {
			# 					has_country_flag = world_tension_joined_conservative_faction
			# 				}
			# 			}
			# 		}
			# 		FROM = {
			# 			set_country_flag = world_tension_joined_conservative_faction
			# 			calculate_faction_joining_tension = yes
			# 			multiply_temp_variable = {
			# 				threat_value = -0.75
			# 			}
			# 			add_named_threat = {
			# 				threat = threat_value
			# 				name = country_joins_alliance_threat
			# 			}
			# 		}
			# 	}
			# 	else_if = {
			# 		limit = {
			# 			OR = {
			# 				tag = INT
			# 				original_tag = JAP
			# 				is_russian_tag = yes
			# 			}
			# 			NOT = {
			# 				FROM = {
			# 					has_country_flag = world_tension_joined_radical_faction
			# 				}
			# 			}
			# 		}
			# 		FROM = {
			# 			set_country_flag = world_tension_joined_radical_faction
			# 			calculate_faction_joining_tension = yes
			# 			multiply_temp_variable = {
			# 				threat_value = 1
			# 			}
			# 			add_named_threat = {
			# 				threat = threat_value
			# 				name = country_joins_alliance_threat
			# 			}
			# 		}
			# 	}
			# }
		}
	}
	#FROM is faction leader on join faction requests. THIS DOES NOT FIRE ON ADD_TO_FACTION EFFECT! USE ON_OFFER_JOIN_FACTION!
	on_join_faction = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_join_faction FROM = [From.GetName]"
		}
	}
	#FROM is the one that joins the faction
	on_create_faction = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_create_faction"
		}
	}
	# ROOT is the new faction leader FROM is the old faction leader
	on_assume_faction_leadership = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_assume_faction_leadership"
		}
	}
	# When a new faction is formed
	on_faction_formed = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_faction_formed"
		}
	}
	# From is owner country
	on_army_leader_daily = {
		effect = {
			if = {
				limit = {
					check_variable = {
						random < 0.02
					}
					NOT = {
						has_trait = sick
						has_character_flag = recently_sick
					}
					set_temp_variable = {
						temp = sum_unit_terrain_modifier@sickness_chance
					}
					divide_temp_variable = {
						temp = num_units
					}
					check_variable = {
						temp > 0.75
					}
				}
				set_character_flag = {
					flag = recently_sick
					value = 1
					days = 180
				}
				add_timed_unit_leader_trait = {
					trait = sick
					days = 30
				}
				unit_leader_event = unit_leader.1
			}
		}
	}
	# From is owner country
	on_army_leader_won_combat = {
		effect = {
			if = {
				limit = {
					NOT = {
						has_trait = wounded
						has_character_flag = recently_wounded
					}
					set_temp_variable = {
						chance = 0.001
					}
					set_temp_variable = {
						factor = 1
					}
					add_to_temp_variable = {
						factor = leader_modifier@wounded_chance_factor
					}
					multiply_temp_variable = {
						chance = factor
					}
					check_variable = {
						random < chance
					}
				}
				set_character_flag = {
					flag = recently_wounded
					value = 1
					days = 360
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = unit_leader.2
			}
		}
	}
	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					NOT = {
						has_trait = wounded
						has_character_flag = recently_wounded
					}
					set_temp_variable = {
						chance = 0.005
					}
					set_temp_variable = {
						factor = 1
					}
					add_to_temp_variable = {
						factor = leader_modifier@wounded_chance_factor
					}
					multiply_temp_variable = {
						chance = factor
					}
					check_variable = {
						random < chance
					}
				}
				set_character_flag = {
					flag = recently_wounded
					value = 1
					days = 360
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = unit_leader.2
			}
		}
	}
	on_army_leader_promoted = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_army_leader_promoted FROM = [From.GetName]"
			add_timed_unit_leader_trait = {
				trait = recently_promoted
				days = 100
			}
		}
	}
	#FROM - Country (owner)
	#ROOT - leader
	#FROMFROM - original owner for exiled leaders
	on_unit_leader_level_up = {
		effect = {
			if = {
				limit = {
					FROM = {
						has_idea = bold_attack_spirit
					}
				}
				character = {
					IF = {
						limit = {
							is_army_leader = yes
						}
						random_list = {
							50 = {
								add_attack = 1
							}
							50 = {
							}
						}
					}
				}
			}
			else_if = {
				#since these spirits are mutually exclusive, we can use else_if for added performance!
				limit = {
					FROM = {
						has_idea = tenacious_defense_spirit
					}
				}
				character = {
					IF = {
						limit = {
							is_army_leader = yes
						}
						random_list = {
							50 = {
								add_defense = 1
							}
							50 = {
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = {
						has_idea = meticulous_preparation_spirit
					}
				}
				character = {
					IF = {
						limit = {
							is_army_leader = yes
						}
						random_list = {
							50 = {
								add_planning = 1
								add_logistics = 1
							}
							50 = {
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = {
						has_idea = instilled_aggression_spirit
					}
				}
				character = {
					IF = {
						limit = {
							is_navy_leader = yes
						}
						random_list = {
							40 = {
								add_attack = 1
							}
							60 = {
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = {
						has_idea = calculated_restraint_spirit
					}
				}
				character = {
					IF = {
						limit = {
							is_navy_leader = yes
						}
						random_list = {
							40 = {
								add_defense = 1
							}
							60 = {
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = {
						has_idea = signals_training_spirit
					}
				}
				character = {
					IF = {
						limit = {
							is_navy_leader = yes
						}
						random_list = {
							40 = {
								add_maneuver = 1
								add_coordination = 1
							}
							60 = {
							}
						}
					}
				}
			}
		}
	}
	on_unit_leader_created = {
		# This uses the UNIT LEADER sub scope of a character, FROM == country
		effect = {
			character = {
				if = {
					limit = {
						is_army_leader = yes
					}
					if = {
						limit = {
							FROM = {
								has_idea = political_loyalty_spirit
							}
							#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									add_unit_leader_trait = media_personality
								}
								50 = {
									add_unit_leader_trait = politically_connected
								}
							}
						}
					}
					else_if = {
						limit = {
							FROM = {
								has_idea = mobile_warfare_academy_spirit
							}
							#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									add_unit_leader_trait = panzer_leader
								}
								50 = {
								}
							}
						}
					}
					else_if = {
						limit = {
							FROM = {
								has_idea = inventive_leadership_spirit
							}
							#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								75 = {
									random_list = {
										33 = {
											add_unit_leader_trait = naval_invader
										}
										33 = {
											add_unit_leader_trait = commando
										}
										33 = {
											add_unit_leader_trait = trickster
										}
									}
								}
								25 = {
								}
							}
						}
					}
					else_if = {
						limit = {
							FROM = {
								has_idea = mass_assault_academy_spirit
							}
							#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									add_unit_leader_trait = infantry_officer
								}
								50 = {
								}
							}
						}
					}
					else_if = {
						limit = {
							FROM = {
								has_idea = superior_firepower_academy_spirit
							}
							#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									add_unit_leader_trait = engineer_officer
								}
								50 = {
								}
							}
						}
					}
					else_if = {
						limit = {
							FROM = {
								has_idea = theatre_training_spirit
							}
							#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									random_list = {
										50 = {
											add_unit_leader_trait = brilliant_strategist
										}
										50 = {
											add_unit_leader_trait = inflexible_strategist
										}
									}
								}
								50 = {
								}
							}
						}
					}
					# else_if = {
					# 	limit = {
					# 		FROM = {
					# 			has_idea = KR_whampoa_academy_spirit
					# 		}
					# 		#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					# 	}
					# 	root = {
					# 		random_list = {
					# 			50 = {
					# 				add_unit_leader_trait = politically_connected
					# 			}
					# 			40 = {
					# 				add_unit_leader_trait = media_personality
					# 			}
					# 			10 = {
					# 				add_unit_leader_trait = war_hero
					# 			}
					# 		}
					# 	}
					# }
				}
				else_if = {
					limit = {
						FROM = {
							has_idea = fleet_in_being_academy_spirit
						}
						#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							50 = {
								add_unit_leader_trait = gunnery_expert
							}
							50 = {
							}
						}
					}
				}
				else_if = {
					limit = {
						FROM = {
							has_idea = trade_interdiction_academy_spirit
						}
						#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							25 = {
								add_unit_leader_trait = seawolf
							}
							25 = {
								add_unit_leader_trait = blockade_runner
							}
							50 = {
							}
						}
					}
				}
				else_if = {
					limit = {
						FROM = {
							has_idea = base_strike_academy_spirit
						}
						#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							50 = {
								add_unit_leader_trait = aviation_enthusiast
							}
							50 = {
							}
						}
					}
				}
			}
		}
	}
	# New Scopes
	# Scope is the country owner of the PotF, FROM is the country of the killer
	on_pride_of_the_fleet_sunk = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_pride_of_the_fleet_sunk FROM = [From.GetName]"
		}
	}
	#ROOT is winner #FROM gets annexed - This fires just before FROM gets annexed, meaning the country and everything it owns still exists. It will also fire on_annex and on_civil_war_end
	on_civil_war_end_before_annexation = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_civil_war_end_before_annexation FROM = [From.GetName]"
		}
	}
	on_civil_war_end = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_civil_war_end FROM = [From.GetName]"
			if = {
				limit = {
					has_country_flag = had_elections
					has_elections = no
				}
				set_politics = {
					ruling_party = var:ROOT.current_party_ideology_group
					elections_allowed = yes
				}
			}
			clr_country_flag = had_elections
		}
	}
	on_unit_leader_created = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_unit_leader_created"
			if = {
				limit = {
					is_exiled_leader = yes
				}
				From.From = {
					save_event_target_as = exile_nation
				}
				add_unit_leader_trait = exiled_leader
				unit_leader_event = mtg_exile_leader_added.1
			}
		}
	}
	on_government_exiled = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_government_exiled"
		}
	}
	#Root is exile
	#From is new host
	#FromFrom is old host
	on_host_changed_from_capitulation = {
		effect = {
			#Transfer exile leaders to new host
			From.From = {
				every_army_leader = {
					limit = {
						is_exiled_leader_from = Root
					}
					set_nationality = Root.From
				}
			}
		}
	}
	#Root is exile
	#From is old host
	on_exile_government_reinstated = {
		effect = {
			From = {
				every_army_leader = {
					limit = {
						is_exiled_leader_from = Root
					}
					set_nationality = Root
				}
			}
			Root = {
				every_army_leader = {
					limit = {
						is_exiled_leader_from = Root
					}
					remove_unit_leader_trait = exiled_leader
					remove_exile_tag = yes
				}
			}
		}
	}
	on_war = {
		effect = {
			log = "[GetDateText]: [Root.GetName]: on_war"
			# Check for puppets at war with their overlord
			if = {
				limit = {
					is_subject = yes
					any_enemy_country = {
						has_subject = ROOT
					}
				}
				overlord = {
					set_autonomy = {
						target = ROOT
						autonomy_state = autonomy_free
					}
				}
			}
		}
	}
	#ROOT = attacking side
	#FROM = defending side
	#fired when two countries end up at war with each other (on_war is fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first)
	on_war_relation_added = {
	}
	on_peace = {
		effect = {
		}
	}
	# ROOT is country, this is ran for every country
	##Party popularity setting
	on_daily = {
		effect = {
			if = {
				limit = {
					NOT = {
						has_variable = party_popularity_var
					}
				}
				set_variable = {
					var = party_popularity_var
					value = ROOT.party_popularity@ruling_party
				}
				multiply_variable = {
					party_popularity_var = 1
				}
				force_update_dynamic_modifier = yes
			}
			if = {
				limit = {
					has_variable = party_popularity_var
				}
				set_variable = {
					var = party_popularity_var
					value = ROOT.party_popularity@ruling_party
				}
				multiply_variable = {
					party_popularity_var = 1
				}
				force_update_dynamic_modifier = yes
			}
		}
	}
	# root country that invades
	# scope state that is invaded
	# from scope state that the invasion started
	on_naval_invasion = {
		effect = {
		}
	}
	# root country that paradrops
	# scope state that is paradroped into
	# from scope state that the paradrop started
	on_paradrop = {
		effect = {
			log = "[GetDateText]: [Root.GetName] has paradropped into [This.GetName] from [From.GetName]"
		}
	}
	# root is the state that was dropped into
	# from is the dropping country
	# this differs from on_paradrop in that it is run once per paradrop, not once per unit dropped
	on_units_paradropped_in_state = {
		effect = {
		}
	}
	on_unit_leader_promote_from_ranks_veteran = {
		#Unit leader scope, FROM is unit
		effect = {
			FROM = {
				add_random_valid_trait_from_unit = {
					character = ROOT
				}
			}
		}
	}
	on_unit_leader_promote_from_ranks_green = {
		#Unit leader scope, FROM is unit
		effect = {
		}
	}
	on_add_history = {
		#Unit Scope
		effect = {
		}
	}
}
