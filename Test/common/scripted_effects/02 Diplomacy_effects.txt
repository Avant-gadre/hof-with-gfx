remove_all_AI_templates = {
	hidden_effect = {
		for_loop_effect = {
			start = 1
			end = 20
			compare = less_than_or_equals
			meta_effect = {
				text = {
					if = {
						limit = {
							has_template = "Infantry template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Infantry template [COUNT]"
						}
					}
					if = {
						limit = {
							has_template = "Light Tank template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Light Tank template [COUNT]"
						}
					}
					if = {
						limit = {
							has_template = "Medium Tank template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Medium Tank template [COUNT]"
						}
					}
					if = {
						limit = {
							has_template = "Modern Tank template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Modern Tank template [COUNT]"
						}
					}
					if = {
						limit = {
							has_template = "Marines template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Marines template [COUNT]"
						}
					}
					if = {
						limit = {
							has_template = "Mountaineers template [COUNT]"
						}
						delete_unit_template_and_units = {
							division_template = "Mountaineers template [COUNT]"
						}
					}
				}
				COUNT = "[?v]"
			}
		}
	}
}

save_current_factory_count = {
	hidden_effect = {
		if = {
			limit = {
				industrial_complex > 0
			}
			set_variable = {
				previous_industrial_complex_count = building_level@industrial_complex
			}
		}
		if = {
			limit = {
				arms_factory > 0
			}
			set_variable = {
				previous_arms_factory_count = building_level@arms_factory
			}
		}
		if = {
			limit = {
				dockyard > 0
			}
			set_variable = {
				previous_dockyard_count = building_level@dockyard
			}
		}
		if = {
			limit = {
				synthetic_refinery > 0
			}
			set_variable = {
				previous_synthetic_refinery_count = building_level@synthetic_refinery
			}
		}
		if = {
			limit = {
				fuel_silo > 0
			}
			set_variable = {
				previous_fuel_silo_count = building_level@fuel_silo
			}
		}
		if = {
			limit = {
				rocket_site > 0
			}
			set_variable = {
				previous_rocket_site_count = building_level@rocket_site
			}
		}
		if = {
			limit = {
				nuclear_reactor > 0
			}
			set_variable = {
				previous_nuclear_reactor_count = building_level@nuclear_reactor
			}
		}
	}
}

restore_previous_factory_count = {
	hidden_effect = {
		if = {
			limit = {
				has_variable = previous_industrial_complex_count
			}
			subtract_from_variable = {
				previous_industrial_complex_count = building_level@industrial_complex
			}
			if = {
				limit = {
					check_variable = {
						previous_industrial_complex_count > 0
					}
				}
				add_building_construction = {
					type = industrial_complex
					level = previous_industrial_complex_count
					instant_build = yes
				}
			}
			clear_variable = previous_industrial_complex_count
		}
		if = {
			limit = {
				has_variable = previous_arms_factory_count
			}
			subtract_from_variable = {
				previous_arms_factory_count = building_level@arms_factory
			}
			if = {
				limit = {
					check_variable = {
						previous_arms_factory_count > 0
					}
				}
				add_building_construction = {
					type = arms_factory
					level = previous_arms_factory_count
					instant_build = yes
				}
			}
			clear_variable = previous_arms_factory_count
		}
		if = {
			limit = {
				has_variable = previous_dockyard_count
			}
			subtract_from_variable = {
				previous_dockyard_count = building_level@dockyard
			}
			if = {
				limit = {
					check_variable = {
						previous_dockyard_count > 0
					}
				}
				add_building_construction = {
					type = dockyard
					level = previous_dockyard_count
					instant_build = yes
				}
			}
			clear_variable = previous_dockyard_count
		}
		if = {
			limit = {
				has_variable = previous_synthetic_refinery_count
			}
			subtract_from_variable = {
				previous_synthetic_refinery_count = building_level@synthetic_refinery
			}
			if = {
				limit = {
					check_variable = {
						previous_synthetic_refinery_count > 0
					}
				}
				add_building_construction = {
					type = synthetic_refinery
					level = previous_synthetic_refinery_count
					instant_build = yes
				}
			}
			clear_variable = previous_synthetic_refinery_count
		}
		if = {
			limit = {
				has_variable = previous_fuel_silo_count
			}
			subtract_from_variable = {
				previous_fuel_silo_count = building_level@fuel_silo
			}
			if = {
				limit = {
					check_variable = {
						previous_fuel_silo_count > 0
					}
				}
				add_building_construction = {
					type = fuel_silo
					level = previous_fuel_silo_count
					instant_build = yes
				}
			}
			clear_variable = previous_fuel_silo_count
		}
		if = {
			limit = {
				has_variable = previous_rocket_site_count
			}
			subtract_from_variable = {
				previous_rocket_site_count = building_level@rocket_site
			}
			if = {
				limit = {
					check_variable = {
						previous_rocket_site_count > 0
					}
				}
				add_building_construction = {
					type = rocket_site
					level = previous_rocket_site_count
					instant_build = yes
				}
			}
			clear_variable = previous_rocket_site_count
		}
		if = {
			limit = {
				has_variable = previous_nuclear_reactor_count
			}
			subtract_from_variable = {
				previous_nuclear_reactor_count = building_level@nuclear_reactor
			}
			if = {
				limit = {
					check_variable = {
						previous_nuclear_reactor_count > 0
					}
				}
				add_building_construction = {
					type = nuclear_reactor
					level = previous_nuclear_reactor_count
					instant_build = yes
				}
			}
			clear_variable = previous_nuclear_reactor_count
		}
	}
}

#this needs to be called *before* every start_civil_war effect
civil_war_set_flag_to_restore_elections = {
	if = {
		limit = {
			has_elections = yes
		}
		set_country_flag = had_elections
	}
}

calculate_days_since_game_start = {
	add_to_temp_variable = {
		days_to_event = 706640
	}
	subtract_from_temp_variable = {
		days_to_event = global.num_days
	}
}

release_and_puppet_of_FROM = {
	if = {
		limit = {
			FROM = {
				exists = no
			}
		}
		ROOT = {
			release_puppet = FROM
		}
	}
	FROM = {
		if = {
			limit = {
				NOT = {
					has_government = ROOT
				}
			}
			set_politics = {
				ruling_party = ROOT
				elections_allowed = no
			}
		}
		add_popularity = {
			ideology = ROOT
			popularity = 0.2
		}
	}
	set_autonomy = {
		target = FROM
		autonomy_state = autonomy_reichskommissariat
	}
}
