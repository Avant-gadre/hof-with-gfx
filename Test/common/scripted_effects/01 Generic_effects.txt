#Country scope
whiteline = {
	custom_effect_tooltip = tooltip_white_line
}

ROOT_inherit_current_scope_wars_effect = {
	custom_effect_tooltip = ROOT_inherit_current_scope_wars_effect
	hidden_effect = {
		every_country = {
			limit = {
				has_defensive_war_with = PREV
			}
			ROOT = {
				declare_war_on = {
					target = PREV
					type = annex_everything
				}
			}
		}
		every_country = {
			limit = {
				has_offensive_war_with = PREV
			}
			declare_war_on = {
				target = ROOT
				type = annex_everything
			}
		}
	}
}

print_variable_log_effect = {
	print_variables = {
		file = variables_yug
		append = yes
	}
}

civil_war_anti_exploiter_punitive_action = {
	# Anti-exploiter punitive brigades! BET YA DIDN'T SEE THAT COMING DID YA?!
	if = {
		limit = {
			has_army_size = {
				size < 1
			}
		}
		division_template = {
			name = "Anti-Exploit Punitive Brigade"
			priority = 1
			division_names_group = ENG_MAR_01
			is_locked = yes
			regiments = {
				infantry = {
					x = 0
					y = 0
				}
				infantry = {
					x = 0
					y = 1
				}
				infantry = {
					x = 0
					y = 2
				}
				infantry = {
					x = 1
					y = 0
				}
				infantry = {
					x = 1
					y = 1
				}
				infantry = {
					x = 1
					y = 2
				}
				infantry = {
					x = 2
					y = 0
				}
				artillery_brigade = {
					x = 2
					y = 1
				}
				artillery_brigade = {
					x = 2
					y = 2
				}
			}
			support = {
				engineer = {
					x = 0
					y = 0
				}
				recon = {
					x = 0
					y = 1
				}
				artillery = {
					x = 0
					y = 2
				}
			}
		}
		random_state = {
			limit = {
				is_capital = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
	}
}

clear_sabotaged_resources_if_necesary = {
	if = {
		limit = {
			NOT = {
				has_dynamic_modifier = {
					modifier = sabotaged_resources
				}
			}
		}
		clear_variable = sabotaged_oil
		clear_variable = sabotaged_aluminium
		clear_variable = sabotaged_rubber
		clear_variable = sabotaged_tungsten
		clear_variable = sabotaged_steel
		clear_variable = sabotaged_chromium
	}
}

remove_from_allowed_party = {
	if = {
		limit = {
			has_government = democratic
		}
		set_temp_variable = {
			allowed_party_democratic = 0
		}
	}
	else_if = {
		limit = {
			has_government = fascism
		}
		set_temp_variable = {
			allowed_party_fascism = 0
		}
	}
	else_if = {
		limit = {
			has_government = communism
		}
		set_temp_variable = {
			allowed_party_communism = 0
		}
	}
	else_if = {
		limit = {
			has_government = neutrality
		}
		set_temp_variable = {
			allowed_party_neutrality = 0
		}
	}
}

upgrade_economy_law = {
	if = {
		limit = {
			has_idea = civilian_economy
		}
		add_ideas = low_economic_mobilisation
	}
	else_if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		add_ideas = partial_economic_mobilisation
	}
	else_if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		add_ideas = war_economy
	}
	else_if = {
		limit = {
			has_idea = war_economy
		}
		add_ideas = tot_economic_mobilisation
	}
	else = {
		add_political_power = 150
	}
}

gain_random_agency_upgrade = {
	#Gives a random agency upgrade or grants a free agency if one has not yet been established
	custom_effect_tooltip = free_agency_upgrade_tt
	hidden_effect = {
		if = {
			limit = {
				has_intelligence_agency = no
			}
			create_intelligence_agency = yes
		}
		else = {
			random_list = {
				1 = {
					upgrade_intelligence_agency = upgrade_economy_civilian
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_economy_civilian
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_army_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_army_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_naval_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_naval_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_airforce_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_airforce_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_passive_defense
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_passive_defense
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_anti_partisan
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_anti_partisan
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_blueprint_stealing
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_blueprint_stealing
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_portable_radios
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_portable_radios
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_invisible_ink
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_invisible_ink
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_plastic_explosives
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_plastic_explosives
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_suicide_pills
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_suicide_pills
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_training_centers
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_training_centers
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_commando_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_commando_training
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_interrogation_techniques
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_interrogation_techniques
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_diplo_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_diplo_training
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_psycho_warfare
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_psycho_warfare
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_form_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_form_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost
							NOT = {
								has_done_agency_upgrade = upgrade_form_department
							}
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost_2
							NOT = {
								has_done_agency_upgrade = upgrade_form_department
							}
							NOT = {
								has_done_agency_upgrade = upgrade_decryption_boost
							}
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength
							NOT = {
								has_done_agency_upgrade = upgrade_form_department
							}
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength_2
							NOT = {
								has_done_agency_upgrade = upgrade_form_department
							}
							NOT = {
								has_done_agency_upgrade = upgrade_crypto_strength
							}
						}
					}
				}
			}
		}
	}
}

join_allies_effect = {
	if = {
		limit = {
			ENG = {
				is_faction_leader = yes
				#has_government = democratic
				NOT = {
					has_war_with = ROOT
				}
			}
		}
		ENG = {
			country_event = generic.2
		}
	}
}

#Should remove any and all fascist foreign influence, to be updated
remove_fascist_spirits_effect = {
	if = {
		limit = {
			has_idea = fascist_influence
		}
		remove_ideas = fascist_influence
	}
	if = {
		limit = {
			has_idea = american_influence_drift_fascism
		}
		remove_ideas = american_influence_drift_fascism
	}
	if = {
		limit = {
			has_idea = GER_align_hungary
		}
		remove_ideas = GER_align_hungary
	}
	if = {
		limit = {
			has_idea = GER_align_romania
		}
		remove_ideas = GER_align_romania
	}
}

#Should remove any and all communist foreign influence
remove_communist_spirits_effect = {
	if = {
		limit = {
			has_idea = communist_pressure
		}
		remove_ideas = communist_pressure
	}
	if = {
		limit = {
			has_idea = american_influence_drift_communism
		}
		remove_ideas = american_influence_drift_communism
	}
	if = {
		limit = {
			has_idea = comintern_influence
		}
		remove_ideas = comintern_influence
	}
	if = {
		limit = {
			has_idea = pan_slavic_propaganda
		}
		remove_ideas = pan_slavic_propaganda
	}
	if = {
		limit = {
			has_idea = agitated_peasants
		}
		remove_ideas = agitated_peasants
	}
	if = {
		limit = {
			has_idea = armed_communist_militants
		}
		remove_ideas = armed_communist_militants
	}
	if = {
		limit = {
			has_idea = BALTIC_communist_propaganda
		}
		remove_ideas = BALTIC_communist_propaganda
	}
	if = {
		limit = {
			has_idea = BALTIC_communist_militancy
		}
		remove_ideas = BALTIC_communist_militancy
	}
	if = {
		limit = {
			has_idea = SWE_foreign_communist_influence
		}
		remove_ideas = SWE_foreign_communist_influence
	}
}

#Should remove any and all democratic foreign influence
remove_democratic_spirits_effect = {
	if = {
		limit = {
			has_idea = democratic_influence
		}
		remove_ideas = democratic_influence
	}
}

#Adds current ruling popularity to a new ideology - useful to represent ideological shifts within the same party
add_ruling_to_dem = {
	custom_effect_tooltip = add_ruling_to_dem_tt
	hidden_effect = {
		if = {
			limit = {
				has_government = neutrality
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				democratic_support_var = neutrality_support_var
			}
			set_variable = {
				var = neutrality_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = communism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				democratic_support_var = communism_support_var
			}
			set_variable = {
				var = communism_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				democratic_support_var = fascism_support_var
			}
			set_variable = {
				var = fascism_support_var
				value = 0
			}
		}
		set_popularities = {
			democratic = democratic_support_var
			neutrality = neutrality_support_var
			fascism = fascism_support_var
			communism = communism_support_var
		}
	}
}

add_ruling_to_fas = {
	custom_effect_tooltip = add_ruling_to_fas_tt
	hidden_effect = {
		if = {
			limit = {
				has_government = neutrality
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				fascism_support_var = neutrality_support_var
			}
			set_variable = {
				var = neutrality_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = communism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				fascism_support_var = communism_support_var
			}
			set_variable = {
				var = communism_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = democratic
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				fascism_support_var = democratic_support_var
			}
			set_variable = {
				var = democratic_support_var
				value = 0
			}
		}
		set_popularities = {
			democratic = democratic_support_var
			neutrality = neutrality_support_var
			fascism = fascism_support_var
			communism = communism_support_var
		}
	}
}

add_ruling_to_com = {
	custom_effect_tooltip = add_ruling_to_com_tt
	hidden_effect = {
		if = {
			limit = {
				has_government = neutrality
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				communism_support_var = neutrality_support_var
			}
			set_variable = {
				var = neutrality_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				communism_support_var = fascism_support_var
			}
			set_variable = {
				var = fascism_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = democratic
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				communism_support_var = democratic_support_var
			}
			set_variable = {
				var = democratic_support_var
				value = 0
			}
		}
		set_popularities = {
			democratic = democratic_support_var
			neutrality = neutrality_support_var
			fascism = fascism_support_var
			communism = communism_support_var
		}
	}
}

add_ruling_to_neu = {
	custom_effect_tooltip = add_ruling_to_neu_tt
	hidden_effect = {
		if = {
			limit = {
				has_government = communism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				neutrality_support_var = communism_support_var
			}
			set_variable = {
				var = communism_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				neutrality_support_var = fascism_support_var
			}
			set_variable = {
				var = fascism_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = democratic
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				neutrality_support_var = democratic_support_var
			}
			set_variable = {
				var = democratic_support_var
				value = 0
			}
		}
		set_popularities = {
			democratic = democratic_support_var
			neutrality = neutrality_support_var
			fascism = fascism_support_var
			communism = communism_support_var
		}
	}
}

set_add_fascist_game_weight_large = {
	GER = {
		if = {
			limit = {
				NOT = {
					has_variable = fascist_game_weight
				}
			}
			set_variable = {
				var = fascist_game_weight
				value = 20
			}
		}
		else = {
			add_to_variable = {
				var = fascist_game_weight
				value = 20
			}
		}
	}
}

set_add_democratic_game_weight_large = {
	GER = {
		if = {
			limit = {
				NOT = {
					has_variable = democratic_game_weight
				}
			}
			set_variable = {
				var = democratic_game_weight
				value = 20
			}
		}
		else = {
			add_to_variable = {
				var = democratic_game_weight
				value = 20
			}
		}
	}
}

set_add_unaligned_game_weight_large = {
	GER = {
		if = {
			limit = {
				NOT = {
					has_variable = unaligned_game_weight
				}
			}
			set_variable = {
				var = unaligned_game_weight
				value = 20
			}
		}
		else = {
			add_to_variable = {
				var = unaligned_game_weight
				value = 20
			}
		}
	}
}

set_add_communist_weight_large = {
	GER = {
		if = {
			limit = {
				NOT = {
					has_variable = communist_game_weight
				}
			}
			set_variable = {
				var = communist_game_weight
				value = 20
			}
		}
		else = {
			add_to_variable = {
				var = communist_game_weight
				value = 20
			}
		}
	}
}

set_add_fascist_weight_small = {
	GER = {
		if = {
			limit = {
				NOT = {
					has_variable = fascist_game_weight
				}
			}
			set_variable = {
				var = fascist_game_weight
				value = 8
			}
		}
		else = {
			add_to_variable = {
				var = fascist_game_weight
				value = 8
			}
		}
	}
}

set_add_democratic_weight_small = {
	GER = {
		if = {
			limit = {
				NOT = {
					has_variable = democratic_game_weight
				}
			}
			set_variable = {
				var = democratic_game_weight
				value = 8
			}
		}
		else = {
			add_to_variable = {
				var = democratic_game_weight
				value = 8
			}
		}
	}
}

set_add_unaligned_weight_small = {
	GER = {
		if = {
			limit = {
				NOT = {
					has_variable = unaligned_game_weight
				}
			}
			set_variable = {
				var = unaligned_game_weight
				value = 8
			}
		}
		else = {
			add_to_variable = {
				var = unaligned_game_weight
				value = 8
			}
		}
	}
}

set_add_communist_weight_small = {
	GER = {
		if = {
			limit = {
				NOT = {
					has_variable = communist_game_weight
				}
			}
			set_variable = {
				var = communist_game_weight
				value = 8
			}
		}
		else = {
			add_to_variable = {
				var = communist_game_weight
				value = 8
			}
		}
	}
}

bba_get_fighter_GER_effect = {
	#creates a fighter design if necessary and exports a number of them to ROOT
	if = {
		limit = {
			GER = {
				has_tech = basic_small_airframe
				NOT = {
					has_tech = improved_small_airframe
				}
			}
		}
		add_equipment_to_stockpile = {
			type = small_plane_airframe_1
			producer = GER
			amount = fighter_buy_amount			#set before the effect is invoked (they said I couldn't have arguments in my scripted effects, BUT LOOK WHOS LAUGHING NOW!!!!!)
			variant_name = "Bf 109 D"			#set up at game start
		}
	}
	else_if = {
		limit = {
			GER = {
				has_tech = improved_small_airframe
				NOT = {
					has_tech = advanced_small_airframe
				}
			}
		}
		if = {
			limit = {
				GER = {
					NOT = {
						has_country_flag = GER_improved_export_fighter_template
					}
				}
			}
			GER = {
				create_equipment_variant = {
					name = "Fw 190"
					type = small_plane_airframe_2
					allow_without_tech = yes					#Makes no difference since effect requires appropriate tech (above), but it improves tooltip
					modules = {
						fixed_main_weapon_slot = aircraft_cannon_1_2x
						fixed_auxiliary_weapon_slot_1 = light_mg_4x
						engine_type_slot = engine_3_1x
						special_type_slot_1 = empty
					}
					icon = "GFX_GER_fighter2_medium"
				}
				set_country_flag = GER_improved_export_fighter_template				#to avoid double templates if this effect is run from different countries
			}
		}
		add_equipment_to_stockpile = {
			type = small_plane_airframe_2
			producer = GER
			amount = fighter_buy_amount
			variant_name = "Fw 190"
		}
	}
	else_if = {
		limit = {
			GER = {
				has_tech = advanced_small_airframe
			}
		}
		if = {
			limit = {
				GER = {
					NOT = {
						has_country_flag = GER_advanced_export_fighter_template
					}
				}
			}
			GER = {
				create_equipment_variant = {
					name = "Ta 152"
					type = small_plane_airframe_3
					allow_without_tech = yes					#Makes no difference since effect requires appropriate tech (above), but it improves tooltip
					modules = {
						fixed_main_weapon_slot = aircraft_cannon_2_2x
						fixed_auxiliary_weapon_slot_1 = heavy_mg_4x
						engine_type_slot = engine_4_1x
						special_type_slot_1 = empty
					}
					icon = "GFX_GER_fighter3_medium"
				}
				set_country_flag = GER_advanced_export_fighter_template
			}
		}
		add_equipment_to_stockpile = {
			type = small_plane_airframe_3
			producer = GER
			amount = fighter_buy_amount
			variant_name = "Ta 152"
		}
	}
}

find_global_platonic_countries = {
	# Look for the countries that meet the best criteria for the different platonic countries we expect in HoI 
	find_biggest_fascist = yes
	find_biggest_democrat = yes
	find_biggest_communist = yes
	find_biggest_non_aligned = yes
	find_biggest_fascist_bully = yes
	find_best_democratic_ally_leader = yes
	find_democratic_sleeping_giant = yes
	find_local_dangerous_fascist = yes
}

find_biggest_fascist_bully = {
	# Finds the biggest and/or meanest fascist country 
	get_highest_scored_country = {
		var = GLOBAL.platonic_fascist_bully
		scorer = fascist_bully_scorer
	}
}

find_best_democratic_ally_leader = {
	# Finds the most suitable democratic country to lead a faction
	get_highest_scored_country = {
		var = GLOBAL.platonic_democratic_ally_leader
		scorer = democratic_faction_leader_scorer
	}
}

find_democratic_sleeping_giant = {
	# Finds biggest desarmed democratic nation. Expected to be USA 
	get_highest_scored_country = {
		var = GLOBAL.platonic_democratic_sleeping_giant
		scorer = democratic_sleeping_giant_scorer
	}
}

find_biggest_fascist = {
	# Finds Nazi Germany, or the closest to it 
	get_highest_scored_country = {
		var = GLOBAL.platonic_big_fascist
		scorer = fascist_major_scorer
	}
}

find_biggest_democrat = {
	# Finds biggest Democratic Nation
	get_highest_scored_country = {
		var = GLOBAL.platonic_big_democratic
		scorer = democratic_major_scorer
	}
}

find_biggest_communist = {
	# Finds biggest Communist
	get_highest_scored_country = {
		var = GLOBAL.platonic_big_communist
		scorer = communist_major_scorer
	}
}

find_biggest_non_aligned = {
	# Finds biggest... anything else
	get_highest_scored_country = {
		var = GLOBAL.platonic_big_non_aligned
		scorer = non_aligned_major_scorer
	}
}

# There are ideology scorers for each continent. If you need more check the generic_platonic_scorers file and make a new scripted effect 
find_local_dangerous_fascist = {
	get_highest_scored_country = {
		var = platonic_local_dangerous_fascist
		scorer = local_fascist_country
	}
}

# The idea is that you can use these effects to store the party popularities (and, if desired, the ruling party) when puppeting or possibly when starting civil wars, and then use the "restore" effects to reset it after the puppeting has happened, so that you don't have to use the overlord's ideology if you don't want to. 
get_current_ideology_popularities = {
	set_variable = {
		ROOT.communist_support_before_change = ROOT.party_popularity_100@communism
	}
	set_variable = {
		ROOT.democratic_support_before_change = ROOT.party_popularity_100@democratic
	}
	set_variable = {
		ROOT.fascist_support_before_change = ROOT.party_popularity_100@fascism
	}
	set_variable = {
		ROOT.neutrality_support_before_change = ROOT.party_popularity_100@neutrality
	}
}

get_current_ruling_party = {
	set_variable = {
		ROOT.ruling_ideology_before_change = ROOT.current_party_ideology_group
	}
}

restore_ideology_popularities = {
	hidden_effect = {
		# Reset popluarities to what they were before puppeting 
		set_popularities = {
			communism = ROOT.communist_support_before_change
			democratic = ROOT.democratic_support_before_change
			fascism = ROOT.fascist_support_before_change
			neutrality = ROOT.neutrality_support_before_change
		}
		clear_variable = ROOT.communist_support_before_change
		clear_variable = ROOT.democratic_support_before_change
		clear_variable = ROOT.fascist_support_before_change
		clear_variable = ROOT.neutrality_support_before_change
	}
}

restore_ruling_party = {
	ROOT = {
		set_politics = {
			ruling_party = var:ROOT.ruling_ideology_before_change
		}
	}
}

#Upgrades state cat to the next valid level. Called from state scope
add_potential_special_forces_tree = {
	custom_effect_tooltip = add_potential_special_forces_tree_tt
	if = {
		limit = {
			NOT = {
				has_variable = sf_trees
			}
		}
		set_variable = {
			sf_trees = 2
		}
	}
	else = {
		add_to_variable = {
			sf_trees = 1
		}
	}
}

remove_potential_special_forces_tree = {
	if = {
		limit = {
			NOT = {
				has_variable = sf_trees
			}
		}
		set_variable = {
			sf_trees = 0
		}
	}
	else = {
		subtract_from_variable = {
			sf_trees = 1
		}
	}
}

store_core_states_on_game_start = {
	#Should be called from history file
	every_core_state = {
		ROOT = {
			add_to_array = {
				array = core_states_at_game_start
				value = PREV
			}
		}
	}
}
